{"version":3,"file":"index.js","sources":["../../src/controllers/AppController.js","../../src/utils/exceptions/NotFoundError.js","../../src/framework/EventHarness.js","../../node_modules/localforage/dist/localforage.js","../../src/models/Model.js","../../src/utils/exceptions/TaxonError.js","../../src/utils/escapeHTML.js","../../src/models/Taxon.js","../../src/models/Occurrence.js","../../src/utils/exceptions/InternalAppError.js","../../src/controllers/MainController.js","../../src/controllers/StaticContentController.js","../../src/models/Survey.js","../../src/models/OccurrenceImage.js","../../src/framework/App.js","../../src/controllers/SurveyPickerController.js","../../src/serviceworker/responses/ResponseFactory.js","../../src/serviceworker/packageClientResponse.js","../../src/serviceworker/responses/LocalResponse.js","../../src/serviceworker/responses/ImageResponse.js","../../src/serviceworker/responses/SurveyResponse.js","../../src/serviceworker/responses/OccurrenceResponse.js","../../src/serviceworker/BSBIServiceWorker.js","../../src/utils/taxonpicker/TaxonSearch.js","../../src/utils/TaxaLoadedHook.js","../../src/utils/formattedImplode.js"],"sourcesContent":["// AppController\r\n// Abstract super-class for page controllers\r\n\r\nexport class AppController {\r\n\r\n    /**\r\n     *\r\n     * @type {(null|string)}\r\n     */\r\n    route = null;\r\n\r\n    /**\r\n     *\r\n     * @type {Page}\r\n     */\r\n    view;\r\n\r\n    title = 'untitled';\r\n\r\n    /**\r\n     *\r\n     * @type {number}\r\n     */\r\n    handle;\r\n\r\n    /**\r\n     *\r\n     * @type {App}\r\n     */\r\n    app;\r\n\r\n    beforeRouteHandler = null;\r\n    afterRouteHandler = null;\r\n    leaveRouteHandler = null;\r\n    alreadyRouteHandler = null;\r\n\r\n    static #handleIndex = 0;\r\n\r\n    static get nextHandle() {\r\n        return AppController.#handleIndex++;\r\n    }\r\n\r\n    /**\r\n     * called from App.initialise() to trigger late-stage initialisation\r\n     */\r\n    initialise() {\r\n        this.view.initialise();\r\n    }\r\n\r\n    /**\r\n     * registers the default route from this.route\r\n     * or alternatively is overridden in a child class\r\n     *\r\n     * @param {PatchedNavigo} router\r\n     */\r\n    registerRoute(router) {\r\n        if (null === this.route) {\r\n            throw new Error(`No route set for '${this.title}' controller.`);\r\n        }\r\n\r\n        console.log({route : this.route});\r\n\r\n        router.on(\r\n            this.route,\r\n            this.routeHandler.bind(this),\r\n            {\r\n                before : this.beforeRouteHandler ? this.beforeRouteHandler.bind(this) : null,\r\n                after : this.afterRouteHandler ? this.afterRouteHandler.bind(this) : null,\r\n                leave : this.leaveRouteHandler ? this.leaveRouteHandler.bind(this) : null,\r\n                already : this.alreadyRouteHandler ? this.alreadyRouteHandler.bind(this) : null\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} params\r\n     * @param {string} query\r\n     */\r\n    routeHandler(params, query) {\r\n\r\n    }\r\n}\r\n","export class NotFoundError extends Error {\r\n    constructor (message) {\r\n        super(message);\r\n    }\r\n}","export class EventHarness {\r\n    /**\r\n     *\r\n     * @type {*[]}\r\n     */\r\n    #eventListeners = [];\r\n\r\n    static STOP_PROPAGATION = 'STOP_PROPAGATION';\r\n\r\n    /**\r\n     *\r\n     * @param {string} eventName\r\n     * @param {Object} obj\r\n     * @param {Function} method\r\n     * @param {*=} constructionParam\r\n     * @deprecated use addListener instead\r\n     * @return {number} handle\r\n     */\r\n    bindListener (eventName, obj, method, constructionParam) {\r\n        this.#eventListeners = this.#eventListeners || [];\r\n\r\n        const handlerFunction =\r\n            function(context, eventName, invocationParam) {\r\n                return method.call(obj, context, eventName, invocationParam, constructionParam);\r\n            };\r\n\r\n        if (this.#eventListeners[eventName]) {\r\n            return (this.#eventListeners[eventName].push(handlerFunction))-1;\r\n        } else {\r\n            this.#eventListeners[eventName] = [handlerFunction];\r\n            return 0; // first element in array\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {string} eventName\r\n     * @param {Function} handler\r\n     * @param {*=} constructionParam\r\n     * @return {number} handle\r\n     */\r\n    addListener (eventName, handler, constructionParam = {}) {\r\n        this.#eventListeners = this.#eventListeners || [];\r\n\r\n        const handlerFunction =\r\n            function(context, eventName, invocationParam = {}) {\r\n                return handler({context, eventName, ...invocationParam, ...constructionParam});\r\n            };\r\n\r\n        if (this.#eventListeners[eventName]) {\r\n            return (this.#eventListeners[eventName].push(handlerFunction)) - 1;\r\n        } else {\r\n            this.#eventListeners[eventName] = [handlerFunction];\r\n            return 0; // first element in array\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {string} eventName\r\n     * @param {number} handle\r\n     * @returns undefined\r\n     */\r\n    removeListener(eventName, handle) {\r\n        if (this.#eventListeners[eventName] && this.#eventListeners[eventName][handle]) {\r\n            delete this.#eventListeners[eventName][handle];\r\n        } else {\r\n            console.log('trying to remove non-existent event handler, event = ' + eventName + ' handle = ' + handle);\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    destructor() {\r\n        this.#eventListeners = null;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {string} eventName\r\n     * @param {Object=} param optional parameter to pass on to listener\r\n     * @return void\r\n     */\r\n    fireEvent (eventName, param) {\r\n        //console.log('fire event \"' + eventName + '\" called by '+this.fire_event.caller.caller+' invoked by '+this.fire_event.caller.caller.caller+' instigated by '+this.fire_event.caller.caller.caller.caller);\r\n\r\n        if (this.#eventListeners) {\r\n            for (let f in this.#eventListeners[eventName]) {\r\n                if (this.#eventListeners[eventName].hasOwnProperty(f)) {\r\n                    if (this.#eventListeners[eventName][f](this, eventName, arguments[1]) === EventHarness.STOP_PROPAGATION) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\n","/*!\n    localForage -- Offline Storage, Improved\n    Version 1.10.0\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(1);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"1\":1}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(2);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"2\":2}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {\n        return;\n    }\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb || !idb.open) {\n            return false;\n        }\n        // We mimic PouchDB here;\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n        // Safari <10.1 does not meet our requirements for IDB support\n        // (see: https://github.com/pouchdb/pouchdb/issues/5572).\n        // Safari 10.1 shipped with fetch, we can use that to detect it.\n        // Note: this creates issues with `window.fetch` polyfills and\n        // overrides; see:\n        // https://github.com/localForage/localForage/issues/856\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n        // some outdated implementations of IDB that appear on Samsung\n        // and HTC Android devices <4.4 are missing IDBKeyRange\n        // See: https://github.com/mozilla/localForage/issues/128\n        // See: https://github.com/mozilla/localForage/issues/272\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined') {\n    // In the \"nopromises\" build this will just throw if you don't have\n    // a global promise object, but it would throw anyway later.\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\nfunction normalizeKey(key) {\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    return key;\n}\n\nfunction getCallback() {\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n        return arguments[arguments.length - 1];\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs = void 0;\nvar dbContexts = {};\nvar toString = Object.prototype.toString;\n\n// Transaction Modes\nvar READ_ONLY = 'readonly';\nvar READ_WRITE = 'readwrite';\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(idb) {\n    return new Promise$1(function (resolve) {\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve, reject) {\n        deferredOperation.resolve = resolve;\n        deferredOperation.reject = reject;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n        return deferredOperation.promise;\n    }\n}\n\nfunction _rejectReadiness(dbInfo, err) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Reject its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.reject(err);\n        return deferredOperation.promise;\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function (e) {\n            e.preventDefault();\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            var db = openreq.result;\n            db.onversionchange = function (e) {\n                // Triggered when the database is modified (e.g. adding an objectStore) or\n                // deleted (even when initiated by other sessions in different tabs).\n                // Closing the connection here prevents those operations from being blocked.\n                // If the database is accessed again later by this instance, the connection\n                // will be reopened or the database recreated as needed.\n                e.target.close();\n            };\n            resolve(db);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Try to establish a new db connection to replace the\n// current one which is broken (i.e. experiencing\n// InvalidStateError while creating a transaction).\nfunction _tryReconnect(dbInfo) {\n    _deferReadiness(dbInfo);\n\n    var dbContext = dbContexts[dbInfo.name];\n    var forages = dbContext.forages;\n\n    for (var i = 0; i < forages.length; i++) {\n        var forage = forages[i];\n        if (forage._dbInfo.db) {\n            forage._dbInfo.db.close();\n            forage._dbInfo.db = null;\n        }\n    }\n    dbInfo.db = null;\n\n    return _getOriginalConnection(dbInfo).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        // store the latest db reference\n        // in case the db was upgraded\n        dbInfo.db = dbContext.db = db;\n        for (var i = 0; i < forages.length; i++) {\n            forages[i]._dbInfo.db = db;\n        }\n    })[\"catch\"](function (err) {\n        _rejectReadiness(dbInfo, err);\n        throw err;\n    });\n}\n\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\n// so we have to do it with callbacks\nfunction createTransaction(dbInfo, mode, callback, retries) {\n    if (retries === undefined) {\n        retries = 1;\n    }\n\n    try {\n        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n        callback(null, tx);\n    } catch (err) {\n        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n            return Promise$1.resolve().then(function () {\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                    // increase the db version, to create the new ObjectStore\n                    if (dbInfo.db) {\n                        dbInfo.version = dbInfo.db.version + 1;\n                    }\n                    // Reopen the database for upgrading.\n                    return _getUpgradedConnection(dbInfo);\n                }\n            }).then(function () {\n                return _tryReconnect(dbInfo).then(function () {\n                    createTransaction(dbInfo, mode, callback, retries - 1);\n                });\n            })[\"catch\"](callback);\n        }\n\n        callback(err);\n    }\n}\n\nfunction createDbContext() {\n    return {\n        // Running localForages sharing a database.\n        forages: [],\n        // Shared database.\n        db: null,\n        // Database readiness (promise).\n        dbReady: null,\n        // Deferred operations on the database.\n        deferredOperations: []\n    };\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = createDbContext();\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.get(key);\n\n                    req.onsuccess = function () {\n                        var value = req.result;\n                        if (value === undefined) {\n                            value = null;\n                        }\n                        if (_isEncodedBlob(value)) {\n                            value = _decodeBlob(value);\n                        }\n                        resolve(value);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var iterationNumber = 1;\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (cursor) {\n                            var value = cursor.value;\n                            if (_isEncodedBlob(value)) {\n                                value = _decodeBlob(value);\n                            }\n                            var result = iterator(value, cursor.key, iterationNumber++);\n\n                            // when the iterator callback returns any\n                            // (non-`undefined`) value, then we stop\n                            // the iteration immediately\n                            if (result !== void 0) {\n                                resolve(result);\n                            } else {\n                                cursor[\"continue\"]();\n                            }\n                        } else {\n                            resolve();\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n\n                    // The reason we don't _save_ null is because IE 10 does\n                    // not support saving the `null` type in IndexedDB. How\n                    // ironic, given the bug below!\n                    // See: https://github.com/mozilla/localForage/issues/161\n                    if (value === null) {\n                        value = undefined;\n                    }\n\n                    var req = store.put(value, key);\n\n                    transaction.oncomplete = function () {\n                        // Cast to undefined so the value passed to\n                        // callback/promise is the same as what one would get out\n                        // of `getItem()` later. This leads to some weirdness\n                        // (setItem('foo', undefined) will return `null`), but\n                        // it's not my fault localStorage is our baseline and that\n                        // it's weird.\n                        if (value === undefined) {\n                            value = null;\n                        }\n\n                        resolve(value);\n                    };\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    // We use a Grunt task to make this safe for IE and some\n                    // versions of Android (including those used by Cordova).\n                    // Normally IE won't like `.delete()` and will insist on\n                    // using `['delete']()`, but we have a build step that\n                    // fixes this for us now.\n                    var req = store[\"delete\"](key);\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onerror = function () {\n                        reject(req.error);\n                    };\n\n                    // The request will be also be aborted if we've exceeded our storage\n                    // space.\n                    transaction.onabort = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.clear();\n\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.count();\n\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var advanced = false;\n                    var req = store.openKeyCursor();\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n                        if (!cursor) {\n                            // this means there weren't enough keys\n                            resolve(null);\n\n                            return;\n                        }\n\n                        if (n === 0) {\n                            // We have the first key, return it if that's what they\n                            // wanted.\n                            resolve(cursor.key);\n                        } else {\n                            if (!advanced) {\n                                // Otherwise, ask the cursor to skip ahead n\n                                // records.\n                                advanced = true;\n                                cursor.advance(n);\n                            } else {\n                                // When we get here, we've got the nth key.\n                                resolve(cursor.key);\n                            }\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openKeyCursor();\n                    var keys = [];\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (!cursor) {\n                            resolve(keys);\n                            return;\n                        }\n\n                        keys.push(cursor.key);\n                        cursor[\"continue\"]();\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n\n        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n            var dbContext = dbContexts[options.name];\n            var forages = dbContext.forages;\n            dbContext.db = db;\n            for (var i = 0; i < forages.length; i++) {\n                forages[i]._dbInfo.db = db;\n            }\n            return db;\n        });\n\n        if (!options.storeName) {\n            promise = dbPromise.then(function (db) {\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                }\n\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.deleteDatabase(options.name);\n\n                    req.onerror = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        reject(req.error);\n                    };\n\n                    req.onblocked = function () {\n                        // Closing all open connections in onversionchange handler should prevent this situation, but if\n                        // we do get here, it just means the request remains pending - eventually it will succeed or error\n                        console.warn('dropInstance blocked for database \"' + options.name + '\" until all open connections are closed');\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        resolve(db);\n                    };\n                });\n\n                return dropDBPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var i = 0; i < forages.length; i++) {\n                        var _forage = forages[i];\n                        _advanceReadiness(_forage._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        } else {\n            promise = dbPromise.then(function (db) {\n                if (!db.objectStoreNames.contains(options.storeName)) {\n                    return;\n                }\n\n                var newVersion = db.version + 1;\n\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                    forage._dbInfo.version = newVersion;\n                }\n\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.open(options.name, newVersion);\n\n                    req.onerror = function (err) {\n                        var db = req.result;\n                        db.close();\n                        reject(err);\n                    };\n\n                    req.onupgradeneeded = function () {\n                        var db = req.result;\n                        db.deleteObjectStore(options.storeName);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        db.close();\n                        resolve(db);\n                    };\n                });\n\n                return dropObjectPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var j = 0; j < forages.length; j++) {\n                        var _forage2 = forages[j];\n                        _forage2._dbInfo.db = db;\n                        _advanceReadiness(_forage2._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        }\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    _support: isIndexedDBValid(),\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys,\n    dropInstance: dropInstance\n};\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n\nfunction createDbTable(t, dbInfo, callback, errorCallback) {\n    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n}\n\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            createDbTable(t, dbInfo, function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        }, reject);\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n    t.executeSql(sqlStatement, args, callback, function (t, error) {\n        if (error.code === error.SYNTAX_ERR) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n                if (!results.rows.length) {\n                    // if the table is missing (was deleted)\n                    // re-create it table and retry\n                    createDbTable(t, dbInfo, function () {\n                        t.executeSql(sqlStatement, args, callback, errorCallback);\n                    }, errorCallback);\n                } else {\n                    errorCallback(t, error);\n                }\n            }, errorCallback);\n        } else {\n            errorCallback(t, error);\n        }\n    }, errorCallback);\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction _setItem(key, value, callback, retriesLeft) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // Try to re-run the transaction.\n                            if (retriesLeft > 0) {\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                                return;\n                            }\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    return _setItem.apply(this, [key, value, callback, 1]);\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// https://www.w3.org/TR/webdatabase/#databases\n// > There is no way to enumerate or delete the databases available for an origin from this API.\nfunction getAllStoreNames(db) {\n    return new Promise$1(function (resolve, reject) {\n        db.transaction(function (t) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n                var storeNames = [];\n\n                for (var i = 0; i < results.rows.length; i++) {\n                    storeNames.push(results.rows.item(i).name);\n                }\n\n                resolve({\n                    db: db,\n                    storeNames: storeNames\n                });\n            }, function (t, error) {\n                reject(error);\n            });\n        }, function (sqlError) {\n            reject(sqlError);\n        });\n    });\n}\n\nfunction dropInstance$1(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            var db;\n            if (options.name === currentConfig.name) {\n                // use the db reference of the current instance\n                db = self._dbInfo.db;\n            } else {\n                db = openDatabase(options.name, '', '', 0);\n            }\n\n            if (!options.storeName) {\n                // drop all database tables\n                resolve(getAllStoreNames(db));\n            } else {\n                resolve({\n                    db: db,\n                    storeNames: [options.storeName]\n                });\n            }\n        }).then(function (operationInfo) {\n            return new Promise$1(function (resolve, reject) {\n                operationInfo.db.transaction(function (t) {\n                    function dropTable(storeName) {\n                        return new Promise$1(function (resolve, reject) {\n                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                                resolve();\n                            }, function (t, error) {\n                                reject(error);\n                            });\n                        });\n                    }\n\n                    var operations = [];\n                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                        operations.push(dropTable(operationInfo.storeNames[i]));\n                    }\n\n                    Promise$1.all(operations).then(function () {\n                        resolve();\n                    })[\"catch\"](function (e) {\n                        reject(e);\n                    });\n                }, function (sqlError) {\n                    reject(sqlError);\n                });\n            });\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    _support: isWebSQLValid(),\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1,\n    dropInstance: dropInstance$1\n};\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n        // in IE8 typeof localStorage.setItem === 'object'\n        !!localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction _getKeyPrefix(options, defaultConfig) {\n    var keyPrefix = options.name + '/';\n\n    if (options.storeName !== defaultConfig.storeName) {\n        keyPrefix += options.storeName + '/';\n    }\n    return keyPrefix;\n}\n\n// Check if localStorage throws when saving an item\nfunction checkIfLocalStorageThrows() {\n    var localStorageTestKey = '_localforage_support_test';\n\n    try {\n        localStorage.setItem(localStorageTestKey, true);\n        localStorage.removeItem(localStorageTestKey);\n\n        return false;\n    } catch (e) {\n        return true;\n    }\n}\n\n// Check if localStorage is usable and allows to save an item\n// This method checks if localStorage is usable in Safari Private Browsing\n// mode, or in any other case where the available quota for localStorage\n// is 0 and there wasn't any saved items yet.\nfunction _isLocalStorageUsable() {\n    return !checkIfLocalStorageThrows() || localStorage.length > 0;\n}\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n    if (!_isLocalStorageUsable()) {\n        return Promise$1.reject();\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            var itemKey = localStorage.key(i);\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance$2(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        var currentConfig = this.config();\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            if (!options.storeName) {\n                resolve(options.name + '/');\n            } else {\n                resolve(_getKeyPrefix(options, self._defaultConfig));\n            }\n        }).then(function (keyPrefix) {\n            for (var i = localStorage.length - 1; i >= 0; i--) {\n                var key = localStorage.key(i);\n\n                if (key.indexOf(keyPrefix) === 0) {\n                    localStorage.removeItem(key);\n                }\n            }\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    _support: isLocalStorageValid(),\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2,\n    dropInstance: dropInstance$2\n};\n\nvar sameValue = function sameValue(x, y) {\n    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n};\n\nvar includes = function includes(array, searchElement) {\n    var len = array.length;\n    var i = 0;\n    while (i < len) {\n        if (sameValue(array[i], searchElement)) {\n            return true;\n        }\n        i++;\n    }\n\n    return false;\n};\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\n// Drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar DefinedDrivers = {};\n\nvar DriverSupport = {};\n\nvar DefaultDrivers = {\n    INDEXEDDB: asyncStorage,\n    WEBSQL: webSQLStorage,\n    LOCALSTORAGE: localStorageWrapper\n};\n\nvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n\nvar OptionalDriverMethods = ['dropInstance'];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var _key in arg) {\n                if (arg.hasOwnProperty(_key)) {\n                    if (isArray(arg[_key])) {\n                        arguments[0][_key] = arg[_key].slice();\n                    } else {\n                        arguments[0][_key] = arg[_key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        for (var driverTypeKey in DefaultDrivers) {\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n                var driver = DefaultDrivers[driverTypeKey];\n                var driverName = driver._driver;\n                this[driverTypeKey] = driverName;\n\n                if (!DefinedDrivers[driverName]) {\n                    // we don't need to wait for the promise,\n                    // since the default drivers can be defined\n                    // in a blocking manner\n                    this.defineDriver(driver);\n                }\n            }\n        }\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                if (i === 'version' && typeof options[i] !== 'number') {\n                    return new Error('Database version must be a number.');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                return this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n\n                var driverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\n                    var driverMethodName = driverMethods[i];\n\n                    // when the property is there,\n                    // it should be a method even when optional\n                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var configureMissingMethods = function configureMissingMethods() {\n                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                        return function () {\n                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                            var promise = Promise$1.reject(error);\n                            executeCallback(promise, arguments[arguments.length - 1]);\n                            return promise;\n                        };\n                    };\n\n                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                        var optionalDriverMethod = OptionalDriverMethods[_i];\n                        if (!driverObject[optionalDriverMethod]) {\n                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                        }\n                    }\n                };\n\n                configureMissingMethods();\n\n                var setDriverSupport = function setDriverSupport(support) {\n                    if (DefinedDrivers[driverName]) {\n                        console.info('Redefining LocalForage driver: ' + driverName);\n                    }\n                    DefinedDrivers[driverName] = driverObject;\n                    DriverSupport[driverName] = support;\n                    // don't use a then, so that we can define\n                    // drivers that have simple _support methods\n                    // in a blocking manner\n                    resolve();\n                };\n\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        driverObject._support().then(setDriverSupport, reject);\n                    } else {\n                        setDriverSupport(!!driverObject._support);\n                    }\n                } else {\n                    setDriverSupport(true);\n                }\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function extendSelfWithDriver(driver) {\n            self._extend(driver);\n            setDriverToConfig();\n\n            self._ready = self._initStorage(self._config);\n            return self._ready;\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!DriverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});\n","import {EventHarness} from \"../framework/EventHarness\";\r\nimport localforage from 'localforage';\r\n\r\nexport function uuid(a){return a?(a^Math.random()*16>>a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,uuid)}\r\n\r\n/**\r\n * regex used to validate AppObject external ids\r\n * (UUID form is 8 digits followed by three groups of 4 digits followed by a group of 12)\r\n */\r\nexport const UUID_REGEX = /^[a-fA-F0-9]{8}-(?:[a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12}$/;\r\n\r\nexport const SAVE_STATE_LOCAL = 'SAVED_LOCALLY';\r\nexport const SAVE_STATE_SERVER = 'SAVED_TO_SERVER';\r\n\r\nexport class Model extends EventHarness {\r\n    /**\r\n     * @type {string}\r\n     */\r\n    _id;\r\n\r\n    /**\r\n     * set if the object has been posted to the server\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    _savedRemotely = false;\r\n\r\n    static EVENT_SAVED_REMOTELY = 'savedremotely';\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} savedFlag\r\n     */\r\n    set savedRemotely(savedFlag) {\r\n        if (this._savedRemotely !== savedFlag) {\r\n            this._savedRemotely = !!savedFlag;\r\n\r\n            if (this._savedRemotely) {\r\n                this.fireEvent(Model.EVENT_SAVED_REMOTELY, {id : this.id});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * set if the object has been added to a temporary store (e.g. indexedDb)\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    _savedLocally = false;\r\n\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    deleted = false;\r\n\r\n    /**\r\n     * unix timestamp\r\n     * Provided that the created stamp is < the modified stamp then the externally assigned creation stamp will be used\r\n     *\r\n     * @type {number}\r\n     */\r\n    createdStamp;\r\n\r\n    /**\r\n     * unix timestamp\r\n     * modified stamp is generally server assigned - rather than using a potentially discrepant client clock\r\n     * this may increase synchrony and trust between distributed clients\r\n     *\r\n     * @type {number}\r\n     */\r\n    modifiedStamp;\r\n\r\n    /**\r\n     * DDb AppProject id\r\n     *\r\n     * @type {number}\r\n     */\r\n    projectId;\r\n\r\n    /**\r\n     * paired with isNew this marks records that have never been edited\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    isPristine = false;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.createdStamp = Math.floor(Date.now() / 1000);\r\n    }\r\n\r\n    /**\r\n     * returns true if either remote or local copy is missing\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    unsaved() {\r\n        return !(this._savedLocally && this._savedRemotely);\r\n    }\r\n\r\n    /**\r\n     * string\r\n     */\r\n    get id() {\r\n        if (!this._id) {\r\n            this._id = uuid();\r\n        } else if (this._id === 'undefined') {\r\n            console.error(\"id is literal 'undefined', am forcing new id\");\r\n            this._id = uuid();\r\n        }\r\n\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} newId\r\n     */\r\n    set id(newId) {\r\n        // only allow an id to be set if not present already\r\n\r\n        if (this._id && newId !== this._id) {\r\n            throw new Error(`Occurrence id has already been set, when trying to set new id '${newId}'.`);\r\n        }\r\n        this._id = newId;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @type {Array.<function>}\r\n     * @private\r\n     */\r\n    static _tasks = [];\r\n\r\n    /**\r\n     * Add a post request to the queue\r\n     * Requests run in sequence.\r\n     * Returns a promise that resolves once the queued request completes\r\n     *\r\n     * The queue reduces the chance of requests being sent to the server out-of-order (which can lead to race conditions)\r\n     *\r\n     * @param formData\r\n     * @returns {Promise}\r\n     */\r\n    queuePost(formData) {\r\n        return new Promise((resolve, reject) => {\r\n            /**\r\n             * @returns {Promise}\r\n             */\r\n            const task = () => {\r\n                console.log({'posting form data': formData});\r\n                return this.post(formData).then(resolve, reject);\r\n            };\r\n\r\n            Model._tasks.push(task);\r\n\r\n            if (Model._tasks.length > 1) {\r\n                console.log(`Added post request to the queue.`);\r\n            } else {\r\n                console.log(`No pending tasks, starting post request immediately.`);\r\n                task().finally(Model._next);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Promise}\r\n     * @private\r\n     */\r\n    static _next() {\r\n        Model._tasks.shift(); // save is done\r\n\r\n        if (Model._tasks.length) {\r\n            // run the next task\r\n            console.log('Running the next task.');\r\n            return Model._tasks[0]().finally(Model._next);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * if not securely saved then makes a post to /save<object>\r\n     *\r\n     * this may be intercepted by a service worker, which could write the image to indexdb\r\n     * a successful save will result in a json response containing the uri from which the image may be retrieved\r\n     * and also the state of persistence (whether or not the image was intercepted by a service worker while offline)\r\n     *\r\n     * if saving fails then the expectation is that there is no service worker, in which case should attempt to write\r\n     * the image directly to indexdb\r\n     *\r\n     * must test indexdb for this eventuality after the save has returned\r\n     *\r\n     * @param {FormData} formData\r\n     * @returns {Promise}\r\n     */\r\n    post(formData) {\r\n        return fetch(this.SAVE_ENDPOINT, {\r\n            method: 'POST',\r\n            body: formData\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                // need to find out whether this was a local store in indexedDb by the service worker\r\n                // or a server-side save\r\n\r\n                // to do that need to decode the json response\r\n                // which can only be done once, so need to clone first\r\n                const clonedResponse = response.clone();\r\n                return clonedResponse.json().then((responseData) => {\r\n                    /** @param {{saveState : string, created : number, modified : number}} responseData */\r\n\r\n                    console.log({'returned to client after save' : responseData});\r\n\r\n                    switch (responseData.saveState) {\r\n                        case SAVE_STATE_SERVER:\r\n                            this._savedLocally = true;\r\n                            //this._savedRemotely = true;\r\n                            this.savedRemotely = true;\r\n                            break;\r\n\r\n                        case SAVE_STATE_LOCAL:\r\n                            this._savedLocally = true;\r\n                            //this._savedRemotely = false;\r\n                            this.savedRemotely = false;\r\n                            break;\r\n\r\n                        default:\r\n                            console.log(`Unrecognised save state '${responseData.saveState}'`);\r\n                    }\r\n\r\n                    this.createdStamp = parseInt(responseData.created, 10);\r\n                    this.modifiedStamp = parseInt(responseData.modified, 10);\r\n\r\n                    // return the json version of the original response as a promise\r\n                    return response.json(); // assign appropriate JSON type to the response\r\n                });\r\n            } else {\r\n                // try instead to write the data to local storage\r\n\r\n                console.log('Save failed, presumably service worker is missing and there is no network connection. Should write to IndexedDb here.');\r\n                return Promise.reject('IndexedDb storage not yet implemented');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} id\r\n     * @param {(Survey|Occurrence|OccurrenceImage)} modelObject\r\n     * @returns {Promise}\r\n     */\r\n    static retrieveFromLocal(id, modelObject) {\r\n        return localforage.getItem(`${modelObject.TYPE}.${id}`)\r\n            .then((descriptor) => {\r\n                if (descriptor) {\r\n                    modelObject.id = id;\r\n                    modelObject._parseDescriptor(descriptor);\r\n\r\n                    return modelObject;\r\n                } else {\r\n                    return Promise.reject(`Failed to retrieve ${modelObject.TYPE}.${id} locally`);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {{id : string, saveState: string, attributes: Object.<string, *>, deleted: boolean|string, created: (number|string), modified: (number|string), projectId: (number|string)}} descriptor\r\n     */\r\n    _parseDescriptor(descriptor) {\r\n        this._parseAttributes(descriptor.attributes);\r\n        this._parseSavedState(descriptor.saveState);\r\n        this.deleted = (descriptor.deleted === true) || (descriptor.deleted === 'true'); // cast stringified boolean to true boolean\r\n        this.createdStamp = parseInt(descriptor.created, 10);\r\n        //this.modifiedStamp = descriptor.modified ? parseInt(descriptor.modified, 10) : this.createdStamp; // avoids NaN\r\n        this.modifiedStamp = descriptor.modified ? parseInt(descriptor.modified, 10) : 0; // avoids NaN\r\n        this.projectId = parseInt(descriptor.projectId, 10);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Object.<string, {}>|string|Array} attributes\r\n     */\r\n    _parseAttributes(attributes) {\r\n        if (typeof attributes === 'string') {\r\n            attributes = JSON.parse(attributes);\r\n        }\r\n\r\n        if (Array.isArray(attributes)) {\r\n            // problematic bug, where empty attributes come back as an array rather than as an object\r\n\r\n            console.log('Attributes were spuriously represented as an array rather than as an empty object');\r\n            this.attributes = {};\r\n        } else {\r\n            this.attributes = attributes;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} saveState\r\n     */\r\n    _parseSavedState(saveState) {\r\n        switch (saveState) {\r\n            case SAVE_STATE_LOCAL:\r\n                //this._savedRemotely = false;\r\n                this.savedRemotely = false;\r\n                this._savedLocally = true;\r\n                break;\r\n\r\n            case SAVE_STATE_SERVER:\r\n                //this._savedRemotely = true;\r\n                this.savedRemotely = true;\r\n                this._savedLocally = true;\r\n                break;\r\n\r\n            default:\r\n                throw new Error(`Unrecognised saved state '${saveState}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update modified stamp to current time\r\n     */\r\n    touch() {\r\n        this.modifiedStamp = Math.floor(Date.now() / 1000);\r\n\r\n        if (this.isPristine) {\r\n            this.isPristine = false;\r\n            this.createdStamp = this.modifiedStamp;\r\n        }\r\n\r\n        this._savedLocally = false;\r\n        //this._savedRemotely = false;\r\n        this.savedRemotely = false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {{}} formSectionProperties\r\n     * @return {{requiredFieldsPresent: boolean, validity: Object.<string, boolean>}}\r\n     */\r\n    evaluateCompletionStatus(formSectionProperties) {\r\n        const validity = {};\r\n        let requiredFieldsPresent = true;\r\n\r\n        for (let key in formSectionProperties) {\r\n            if (formSectionProperties.hasOwnProperty(key)) {\r\n                let property = formSectionProperties[key];\r\n\r\n                validity[key] = property.validator ?\r\n                    property.validator(key, property, this.attributes)\r\n                    :\r\n                    property.field.isValid(key, property, this.attributes);\r\n\r\n                if (null !== validity[key]) {\r\n                    // validity can be 'null' in which case field was optional and not assessed\r\n                    requiredFieldsPresent = requiredFieldsPresent && validity[key];\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            requiredFieldsPresent,\r\n            validity\r\n        };\r\n    }\r\n}\r\n","export class TaxonError extends Error {\r\n\r\n}","/**\r\n *\r\n * @param text\r\n * @returns {string}\r\n */\r\nexport function escapeHTML(text) {\r\n    try {\r\n        // IE (even v 11) sometimes fails here with 'Unknown runtime error', see http://blog.rakeshpai.me/2007/02/ies-unknown-runtime-error-when-using.html\r\n        const textArea = document.createElement('textarea');\r\n        textArea.innerHTML = text;\r\n        return textArea.innerHTML.replace(/\"/g, '&quot;');\r\n    } catch (e) {\r\n        const pre = document.createElement('pre');\r\n        pre.appendChild(document.createTextNode(text));\r\n        return pre.innerHTML.replace(/\"/g, '&quot;');\r\n    }\r\n}","import {TaxonError} from \"../utils/exceptions/TaxonError\";\r\nimport {escapeHTML} from \"../utils/escapeHTML\";\r\n\r\n/**\r\n * @external BsbiDb\r\n */\r\n\r\nexport class Taxon {\r\n    /**\r\n     * @typedef RawTaxon\r\n     * @type {array}\r\n     * @property {string} 0 - nameString\r\n     * @property {(string|number)} 1 - canonical\r\n     * @property {string} 2 hybridCanonical, raw entry is 0 if canonical == hybridCanonical\r\n     * @property {(string|number)} 3 acceptedEntityId or 0 if name is accepted\r\n     * @property {string} 4 qualifier\r\n     * @property {string} 5 authority\r\n     * @property {string} 6 vernacular\r\n     * @property {string} 7 vernacularRoot\r\n     * @property {number} 8 used\r\n     * @property {number} 9 sortOrder\r\n     * @property {Array.<string>} 10 parentIds\r\n     */\r\n\r\n    /**\r\n     *\r\n     * @type {Object.<string, RawTaxon>}\r\n     */\r\n    static rawTaxa; // = BsbiDb.TaxonNames;\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    id;\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    nameString = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    canonical = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    hybridCanonical = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    acceptedEntityId = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    qualifier = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    authority = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    vernacular = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    vernacularRoot = '';\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    used;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    sortOrder;\r\n\r\n    /**\r\n     *\r\n     * @type {Array.<string>}\r\n     */\r\n    parentIds = [];\r\n\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    static showVernacular = true;\r\n\r\n    /**\r\n     *\r\n     * @param {string} id\r\n     * @returns {Taxon}\r\n     * @throws {TaxonError}\r\n     */\r\n    static fromId (id) {\r\n        if (!Taxon.rawTaxa) {\r\n            // may not yet have been initialised due to deferred loading\r\n\r\n            if (BsbiDb.TaxonNames) {\r\n                Taxon.rawTaxa = BsbiDb.TaxonNames;\r\n            } else {\r\n                throw new TaxonError(`Taxon.fromId() called before taxon list has loaded.`);\r\n            }\r\n        }\r\n\r\n        if (!Taxon.rawTaxa.hasOwnProperty(id)) {\r\n            throw new TaxonError(`Taxon id '${id}' not found.`);\r\n        }\r\n\r\n        const raw = Taxon.rawTaxa[id];\r\n\r\n        const taxon = new Taxon;\r\n\r\n        taxon.id = id;\r\n        taxon.nameString = raw[0];\r\n        taxon.canonical = raw[1] || raw[0]; // raw entry is blank if namesString == canonical\r\n        taxon.hybridCanonical = raw[2] || taxon.canonical; // raw entry is blank if canonical == hybridCanonical\r\n        taxon.acceptedEntityId = raw[3] || id;\r\n        taxon.qualifier = raw[4];\r\n        taxon.authority = raw[5];\r\n        taxon.vernacular = raw[6];\r\n        taxon.vernacularRoot = raw[7];\r\n        taxon.used = raw[8];\r\n        taxon.sortOrder = raw[9];\r\n        taxon.parentIds = raw[10];\r\n\r\n        return taxon;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {boolean} vernacularMatched\r\n     * @returns {string}\r\n     */\r\n    formattedHTML(vernacularMatched) {\r\n        let acceptedTaxon;\r\n        if (this.id !== this.acceptedEntityId) {\r\n            acceptedTaxon = Taxon.fromId(this.acceptedEntityId);\r\n        }\r\n\r\n        if (Taxon.showVernacular) {\r\n            if (vernacularMatched) {\r\n                return (acceptedTaxon) ?\r\n                    `<q class=\"taxon-vernacular\">${escapeHTML(this.vernacular)}</q><wbr> <span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(this.authority)}</span>` +\r\n                        ` = <span class=\"italictaxon\">${acceptedTaxon.nameString}${acceptedTaxon.qualifier ? ` <span class=\"taxon-qualifier\">${acceptedTaxon.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(acceptedTaxon.authority)}</span>`\r\n                    :\r\n                    `<q class=\"taxon-vernacular\">${escapeHTML(this.vernacular)}</q><wbr> <span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(this.authority)}</span>`\r\n                    ;\r\n            } else {\r\n                return (acceptedTaxon) ?\r\n                    `<span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${this.authority}</span>${this.vernacular ? ` <wbr><q class=\"taxon-vernacular\">${escapeHTML(this.vernacular)}</q>` : ''\r\n                        } = <span class=\"italictaxon\">${acceptedTaxon.nameString}${acceptedTaxon.qualifier ? ` <span class=\"taxon-qualifier\">${acceptedTaxon.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(acceptedTaxon.authority)}</span>`\r\n                    :\r\n                    `<span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(this.authority)}</span>${this.vernacular ? ` <wbr><q class=\"taxon-vernacular\">${escapeHTML(this.vernacular)}</q>` : ''}`\r\n                    ;\r\n            }\r\n        } else {\r\n            return (acceptedTaxon) ?\r\n                `<span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${this.authority}</span>` +\r\n                    ` = <span class=\"italictaxon\">${acceptedTaxon.nameString}${acceptedTaxon.qualifier ? ` <span class=\"taxon-qualifier\">${acceptedTaxon.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(acceptedTaxon.authority)}</span>`\r\n                :\r\n                `<span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(this.authority)}</span>`\r\n                ;\r\n        }\r\n    }\r\n}\r\n","import {Model} from \"./Model\";\r\nimport {Taxon} from \"./Taxon\";\r\n//import {Form} from \"../views/forms/Form\";\r\n\r\nexport class Occurrence extends Model {\r\n\r\n    /**\r\n     *\r\n     * @type {Object.<string, *>}\r\n     */\r\n    attributes = {\r\n        // taxon: {\r\n        //     taxonId: '',\r\n        //     taxonName: '',\r\n        //     vernacularMatch: false\r\n        // }\r\n    };\r\n\r\n    // /**\r\n    //  * set if the image has been posted to the server\r\n    //  * (a local copy might still exist, which may have been reduced to thumbnail resolution)\r\n    //  *\r\n    //  * @type {boolean}\r\n    //  */\r\n    // _savedRemotely = false;\r\n\r\n    // /**\r\n    //  * set if the image has been added to a temporary store (e.g. indexedDb)\r\n    //  *\r\n    //  * @type {boolean}\r\n    //  */\r\n    // _savedLocally = false;\r\n\r\n    SAVE_ENDPOINT = '/saveoccurrence.php';\r\n\r\n    TYPE = 'occurrence';\r\n\r\n    /**\r\n     * fired from Occurrence when the object's contents have been modified\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_MODIFIED = 'modified';\r\n\r\n    /**\r\n     * set if this is a new entry (before user has moved on to the next entry)\r\n     * influences whether form validation errors are displayed\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    isNew = false;\r\n\r\n    /**\r\n     *\r\n     * @returns {(Taxon|null)} returns null for unmatched taxa specified by name\r\n     */\r\n    get taxon() {\r\n        return this.attributes.taxon && this.attributes.taxon.taxonId ? Taxon.fromId(this.attributes.taxon.taxonId) : null;\r\n    };\r\n\r\n    // /**\r\n    //  *\r\n    //  * @param {OccurrenceForm} form\r\n    //  * @returns {OccurrenceForm}\r\n    //  */\r\n    // setForm(form) {\r\n    //     form.addListener(Form.CHANGE_EVENT, this.formChangedHandler.bind(this));\r\n    //\r\n    //     if (!this.isNew) {\r\n    //         form.liveValidation = true;\r\n    //     }\r\n    //     return form;\r\n    // }\r\n\r\n    /**\r\n     * called after the form has changed, before the values have been read back in to the occurrence\r\n     *\r\n     * @param {{form: Form}} params\r\n     */\r\n    formChangedHandler(params) {\r\n        console.log('Occurrence change handler invoked.');\r\n\r\n        // read new values\r\n        // then fire it's own change event (Occurrence.EVENT_MODIFIED)\r\n        params.form.updateModelFromContent();\r\n\r\n        // refresh the form's validation state\r\n        params.form.conditionallyValidateForm();\r\n\r\n        this.touch();\r\n        this.fireEvent(Occurrence.EVENT_MODIFIED, {occurrenceId : this.id});\r\n    }\r\n\r\n    delete() {\r\n        if (!this.deleted) {\r\n            this.touch();\r\n            this.deleted = true;\r\n\r\n            this.fireEvent(Occurrence.EVENT_MODIFIED, {occurrenceId : this.id});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * if not securely saved then makes a post to /saveoccurrence.php\r\n     *\r\n     * this may be intercepted by a service worker, which could write the image to indexdb\r\n     * a successful save will result in a json response containing the uri from which the image may be retrieved\r\n     * and also the state of persistence (whether or not the image was intercepted by a service worker while offline)\r\n     *\r\n     * if saving fails then the expectation is that there is no service worker, in which case should attempt to write\r\n     * the image directly to indexdb\r\n     *\r\n     * must test indexdb for this eventuality after the save has returned\r\n     *\r\n     * @param {string} surveyId\r\n     * @returns {Promise}\r\n     */\r\n    save(surveyId) {\r\n        if (!this._savedRemotely) {\r\n            const formData = new FormData;\r\n\r\n            if (!surveyId && this.surveyId) {\r\n                surveyId = this.surveyId;\r\n            }\r\n\r\n            formData.append('type', this.TYPE);\r\n            formData.append('surveyId', surveyId);\r\n            formData.append('occurrenceId', this.id);\r\n            formData.append('id', this.id);\r\n            formData.append('projectId', this.projectId.toString());\r\n            formData.append('attributes', JSON.stringify(this.attributes));\r\n            formData.append('deleted', this.deleted.toString());\r\n            formData.append('created', this.createdStamp.toString());\r\n\r\n            console.log('queueing occurrence post');\r\n            return this.queuePost(formData);\r\n        } else {\r\n            return Promise.reject(`${this.id} has already been saved.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {{id : string, saveState: string, attributes: Object.<string, *>, deleted: boolean|string, created: number, modified: number, projectId: number, surveyId: string}} descriptor\r\n     */\r\n    _parseDescriptor(descriptor) {\r\n        super._parseDescriptor(descriptor);\r\n        this.surveyId = descriptor.surveyId;\r\n    }\r\n}\r\n","/**\r\n *\r\n */\r\nexport class InternalAppError extends Error {\r\n\r\n}","// MainController\r\n// Controller for app 'homepage' including the top level form settings followed by a list of occurrences\r\n// probably as an accordion (collapsible list, e.g. https://getbootstrap.com/docs/4.3/components/collapse/#accordion-example)\r\n// that should target the detailed view of the occurrence into either a full screen (on mobile) or a right-hand panel.\r\n\r\nimport {AppController} from './AppController';\r\nimport {NotFoundError} from \"../utils/exceptions/NotFoundError\";\r\nimport {Occurrence} from \"../models/Occurrence\";\r\nimport {InternalAppError} from \"../utils/exceptions/InternalAppError\";\r\n\r\nexport class MainController extends AppController {\r\n    route = '/list/:action/:id';\r\n\r\n    static EVENT_SELECT_OCCURRENCE = 'selectoccurrence';\r\n    static EVENT_SELECT_SURVEY_SECTION = 'selectsurveysection';\r\n    static EVENT_NEW_RECORD = 'newrecord';\r\n    static EVENT_DELETE_OCCURRENCE = 'deleteoccurrence';\r\n    static EVENT_BACK = 'back';\r\n\r\n    /**\r\n     * event fired on and by view when 'next section' button has been click, leading to the records section\r\n     * this will expand the list of records, or if none exist, add a first one and open it\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_NEXT_TO_RECORDS = 'nexttorecords';\r\n\r\n    /**\r\n     * ? should be overridden by child class\r\n     *\r\n     * @type {string}\r\n     */\r\n    title = 'App homepage';\r\n\r\n    /**\r\n     * @type {App}\r\n     */\r\n    app;\r\n\r\n    /**\r\n     *\r\n     * @type {MainView}\r\n     */\r\n    view;\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    #currentOccurrenceId = '';\r\n\r\n    /**\r\n     * set if the view needs full layout rendering\r\n     * @todo this should possibly be a view rather than controller property\r\n     * @type {boolean}\r\n     */\r\n    needsFullRefresh = true;\r\n\r\n    /**\r\n     * set if the currently displayed occurrence needs revision\r\n     * @todo this should possibly be a view rather than controller property\r\n     * @type {boolean}\r\n     */\r\n    needRightPanelRefresh = true;\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    viewSubcontext = '';\r\n\r\n    /**\r\n     * Currently displayed survey subsection\r\n     *\r\n     * @type {string|null}\r\n     */\r\n    surveySection;\r\n\r\n    /**\r\n     * this is the route that the 'back button' in a right-hand panel view should resolve to\r\n     * @type {string}\r\n     */\r\n    leftPanelBaseRoute = '';\r\n\r\n    /**\r\n     * ultimately this getter might be the point at which to apply filters\r\n     *\r\n     * @returns {Map.<string,Occurrence>}\r\n     */\r\n    get occurrences() {\r\n        return this.app.occurrences;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {null|Occurrence}\r\n     */\r\n    get currentOccurrence() {\r\n        if (this.#currentOccurrenceId) {\r\n            if (this.app.occurrences.has(this.#currentOccurrenceId)) {\r\n                return this.app.occurrences.get(this.#currentOccurrenceId);\r\n            } else {\r\n                throw new NotFoundError(`Record id '${this.#currentOccurrenceId}' was not found.`);\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get currentOccurrenceId() {\r\n        return this.#currentOccurrenceId;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} occurrenceId\r\n     */\r\n    set currentOccurrenceId(occurrenceId) {\r\n        this.#currentOccurrenceId = occurrenceId;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Survey}\r\n     */\r\n    get survey() {\r\n        return this.app.currentSurvey;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {MainView} view\r\n     */\r\n    constructor (view) {\r\n        super();\r\n\r\n        this.view = view;\r\n        view.controller = this;\r\n\r\n        this.handle = AppController.nextHandle;\r\n\r\n        view.addListener(MainController.EVENT_SELECT_OCCURRENCE, this.occurrenceSelectionHandler.bind(this));\r\n        view.addListener(MainController.EVENT_SELECT_SURVEY_SECTION, this.surveyPartSelectionHandler.bind(this));\r\n        view.addListener(MainController.EVENT_NEW_RECORD, this.newRecordHandler.bind(this));\r\n        view.addListener(MainController.EVENT_DELETE_OCCURRENCE, this.deleteOccurrenceHandler.bind(this));\r\n        view.addListener(MainController.EVENT_BACK, this.backHandler.bind(this));\r\n        view.addListener(MainController.EVENT_NEXT_TO_RECORDS, this.nextTransitionToRecordsHandler.bind(this));\r\n    }\r\n\r\n    /**\r\n     * handler for event fired on and by view when 'next section' button has been click, leading to the records section\r\n     * this will expand the list of records, or if none exist, add a first one and open it\r\n     */\r\n    nextTransitionToRecordsHandler() {\r\n        console.log('in nextTransitionToRecordsHandler()');\r\n\r\n        if (this.app.haveExtantOccurrences()) {\r\n            this.app.router.navigate('/list/record/');\r\n        } else {\r\n            this.newRecordHandler();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {{occurrenceId : string}} parameters\r\n     */\r\n    deleteOccurrenceHandler(parameters) {\r\n        console.log({deleting : parameters.occurrenceId});\r\n\r\n        const occurrence = this.app.occurrences.get(parameters.occurrenceId);\r\n        if (!occurrence) {\r\n            throw new InternalAppError(`Occurrence id '${parameters.occurrenceId}' not found when trying to delete.`);\r\n        }\r\n\r\n        occurrence.delete();\r\n        if (this.currentOccurrenceId === parameters.occurrenceId) {\r\n            this.app.router.navigate(`/list/record/`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {{sectionKey : string}} params\r\n     */\r\n    surveyPartSelectionHandler (params) {\r\n        console.log({'In surveyPartSelectionHandler' : params});\r\n\r\n        if (params.sectionKey === 'record') {\r\n            this.app.router.navigate(`/list/record/`);\r\n        } else if (params.sectionKey) {\r\n            this.app.router.navigate(`/list/survey/${params.sectionKey}`);\r\n        } else {\r\n            this.app.router.navigate(`/list/`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * may be invoked directly or in response to the Add New Record event\r\n     * therefore assume that the method receives no event parameters\r\n     */\r\n    newRecordHandler() {\r\n        const occurrence = this.app.addNewOccurrence();\r\n\r\n        this.app.router.navigate(`/list/record/${occurrence.id}`);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {{occurrenceId : string}} params\r\n     */\r\n    occurrenceSelectionHandler (params) {\r\n        console.log({'In occurrenceSelectionHandler' : params});\r\n\r\n        if (this.currentOccurrenceId && params.occurrenceId && this.currentOccurrenceId === params.occurrenceId) {\r\n            console.log(`ignoring spurious navigation event for '${params.occurrenceId}'`);\r\n        } else {\r\n            this.app.router.navigate(`/list/record/${params.occurrenceId}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * registers the default route from this.route\r\n     * or alternatively is overridden in a child class\r\n     *\r\n     * @param {PatchedNavigo} router\r\n     */\r\n    registerRoute(router) {\r\n        router.on(\r\n            '/list',\r\n            this.mainRouteHandler.bind(this, 'list', '', ''),\r\n            {\r\n                before : this.beforeRouteHandler ? this.beforeRouteHandler.bind(this) : null,\r\n                after : this.afterRouteHandler ? this.afterRouteHandler.bind(this) : null,\r\n                leave : this.leaveRouteHandler ? this.leaveRouteHandler.bind(this) : null,\r\n                already : this.alreadyRouteHandler ? this.alreadyRouteHandler.bind(this) : null\r\n            }\r\n        );\r\n\r\n        router.on(\r\n            '/list/help',\r\n            this.mainRouteHandler.bind(this, 'list', '', 'help')\r\n        );\r\n\r\n        router.on(\r\n            '/list/record/',\r\n            this.mainRouteHandler.bind(this, 'list', 'record', ''),\r\n            {\r\n                before : this.beforeRouteHandler ? this.beforeRouteHandler.bind(this) : null,\r\n                after : this.afterRouteHandler ? this.afterRouteHandler.bind(this) : null,\r\n                leave : this.leaveRouteHandler ? this.leaveRouteHandler.bind(this) : null,\r\n                already : this.alreadyRouteHandler ? this.alreadyRouteHandler.bind(this) : null\r\n            }\r\n        );\r\n\r\n        router.on(\r\n            '/list/record/help',\r\n            this.mainRouteHandler.bind(this, 'list', 'record', 'help')\r\n        );\r\n\r\n        router.on(\r\n            '/list/record/:id',\r\n            this.mainRouteHandler.bind(this, 'list', 'record', 'form'),\r\n            {\r\n                before : this.beforeRouteHandler ? this.beforeRouteHandler.bind(this) : null,\r\n                after : this.afterRouteHandler ? this.afterRouteHandler.bind(this) : null,\r\n                leave : this.leaveRouteHandler ? this.leaveRouteHandler.bind(this) : null,\r\n                already : this.alreadyRouteHandler ? this.alreadyRouteHandler.bind(this) : null\r\n            }\r\n        );\r\n\r\n        router.on(\r\n            '/list/survey/:section',\r\n            this.mainRouteHandler.bind(this, 'list', 'survey', ''),\r\n            {\r\n                before : this.beforeRouteHandler ? this.beforeRouteHandler.bind(this) : null,\r\n                after : this.afterRouteHandler ? this.afterRouteHandler.bind(this) : null,\r\n                leave : this.leaveRouteHandler ? this.leaveRouteHandler.bind(this) : null,\r\n                already : this.alreadyRouteHandler ? this.alreadyRouteHandler.bind(this) : null\r\n            }\r\n        );\r\n\r\n        router.on(\r\n            '/list/survey/:section/help',\r\n            this.mainRouteHandler.bind(this, 'list', 'survey', 'help')\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} context typically 'list'\r\n     * @param {('record'|'survey')} subcontext record|survey\r\n     * @param {(''|'help')} rhs\r\n     * @param {Object.<string, string>} queryParameters\r\n     */\r\n    mainRouteHandler(context, subcontext, rhs, queryParameters) {\r\n        console.log(\"reached special route handler for MainController.js\");\r\n        console.log({context: context, params: subcontext, query: queryParameters});\r\n\r\n        this.app.saveRoute();\r\n\r\n        try {\r\n            this.viewSubcontext = subcontext;\r\n\r\n            if (subcontext) {\r\n                this.viewContexts[subcontext].call(this, queryParameters);\r\n            }\r\n\r\n            if (this.app.currentControllerHandle !== this.handle) {\r\n                // need a complete refresh of the page (the list and any occurrence panel)\r\n\r\n                // console.log(`currentControllerHandle = ${this.app.currentControllerHandle}, handle = ${this.handle}`);\r\n\r\n                this.needsFullRefresh = true;\r\n                this.needRightPanelRefresh = true;\r\n\r\n                this.app.currentControllerHandle = this.handle;\r\n            }\r\n\r\n            this.view.panelKey = rhs;\r\n            this.view.display();\r\n            this.needsFullRefresh = false;\r\n        } catch (error) {\r\n            this.error = error;\r\n\r\n            console.log({error});\r\n\r\n            // attempt to carry on regardless to some extent (error should be reported in the view)\r\n            // but wrap in a further try just in case\r\n\r\n            try {\r\n                this.needsFullRefresh = true;\r\n                this.view.display();\r\n            } catch (rethrownError) {\r\n                console.log({rethrownError});\r\n                document.body.innerHTML = `<h2>Internal error</h2><p>Please report this problem:</p><p>${rethrownError.message}</p>`;\r\n            }\r\n        }\r\n    }\r\n\r\n    viewContexts = {\r\n        /**\r\n         * @this {MainController}\r\n         * @param {({[id] : string}|null)} queryParameters\r\n         */\r\n        record (queryParameters) {\r\n            // if (queryParameters && queryParameters.id) {\r\n            //     console.log(`in record id ${queryParameters.id}`);\r\n            // }\r\n            // console.log({scope: this});\r\n            this.surveySection = null; // No current survey form section, all should be closed\r\n\r\n            if (!queryParameters) {\r\n                // query parameters can be missing\r\n                // force a refresh as it cheap to refresh static content and more difficult to detect\r\n                // if strictly needed.\r\n                // May have reached this point following deletion of the current record.\r\n\r\n                this.currentOccurrenceId = '';\r\n                this.needRightPanelRefresh = true;\r\n            } else if (this.#currentOccurrenceId !== queryParameters.id) {\r\n                this.needRightPanelRefresh = true;\r\n\r\n                this.currentOccurrenceId = queryParameters.id ?\r\n                     queryParameters.id\r\n                    :\r\n                    '';\r\n\r\n            } else {\r\n                this.needRightPanelRefresh = false;\r\n            }\r\n\r\n            this.leftPanelBaseRoute = '/list/record';\r\n        },\r\n\r\n        /**\r\n         * @this {MainController}\r\n         * @param {{[section]: string}} queryParameters\r\n         */\r\n        survey(queryParameters) {\r\n            console.log(`in survey section ${queryParameters.section}`);\r\n            this.currentOccurrenceId = '';\r\n            this.needRightPanelRefresh = true;\r\n            this.surveySection = queryParameters.section;\r\n\r\n            this.leftPanelBaseRoute = `/list/survey/${queryParameters.section}`;\r\n        }\r\n    };\r\n\r\n    backHandler() {\r\n       if (this.app.routeHistory.length >= 2 && this.app.routeHistory[this.app.routeHistory.length - 2].url === this.leftPanelBaseRoute) {\r\n            this.app.routeHistory.length -= 1;\r\n            console.log('using standard back navigation');\r\n            window.history.back();\r\n            //console.log('fell through back!');\r\n        } else {\r\n            console.log(`navigating back using base address '${this.leftPanelBaseRoute}'`);\r\n            this.app.router.navigate(this.leftPanelBaseRoute);\r\n        }\r\n    }\r\n}\r\n","// StaticContentController\r\n\r\nimport {AppController} from './AppController';\r\n\r\nexport class StaticContentController extends AppController {\r\n    /**\r\n     * @type {string}\r\n     */\r\n    route;\r\n\r\n    /**\r\n     *\r\n     * @param {Page} view\r\n     * @param {string} route\r\n     */\r\n    constructor (view, route) {\r\n        super();\r\n\r\n        this.view = view;\r\n        this.route = route;\r\n\r\n        this.handle = AppController.nextHandle;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} params\r\n     * @param {string} query\r\n     */\r\n    routeHandler(params, query) {\r\n        // console.log(\"reached route handler for StaticContentController.js\");\r\n\r\n        this.app.currentControllerHandle = this.handle;\r\n        this.view.display();\r\n    }\r\n}\r\n","// a Survey captures the currentSurvey meta data\r\n// i.e. it captures site details (name, location); user details (name, email)\r\n//\r\n// if a user were to submit multiple surveys then they would end up in the contact database multiple times\r\n// this is probably unavoidable. Not worth the effort and risk of automatic de-duplication. Email preferences would be\r\n// shared, keyed by email.\r\n\r\nimport {Model} from \"./Model\";\r\n//import {SurveyForm} from \"../views/forms/SurveyForm\";\r\nimport {escapeHTML} from \"../utils/escapeHTML\";\r\n//import {TextGeorefField} from \"../views/formfields/TextGeorefField\";\r\n//import {Form} from \"../views/forms/Form\";\r\n\r\nexport class Survey extends Model {\r\n\r\n    /**\r\n     * fired from Survey when the object's contents have been modified\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_MODIFIED = 'modified';\r\n\r\n    SAVE_ENDPOINT = '/savesurvey.php';\r\n\r\n    TYPE = 'survey';\r\n\r\n    /**\r\n     *\r\n     * @type {Object.<string, *>}\r\n     */\r\n    attributes = {\r\n\r\n    };\r\n\r\n    /**\r\n     * if set then provide default values (e.g. GPS look-up of current geo-reference)\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    isNew = false;\r\n\r\n    /**\r\n     * kludge to flag once the App singleton has set up a listner for changes on the survey\r\n     * @type {boolean}\r\n     */\r\n    hasAppModifiedListener = false;\r\n\r\n    /**\r\n     *\r\n     * @returns {({rawString: string, precision: number|null, source: string|null, gridRef: string, latLng: ({lat: number, lng: number}|null)}|null)}\r\n     */\r\n    get geoReference() {\r\n        return this.attributes.georef || {\r\n            gridRef: '',\r\n            rawString: '', // what was provided by the user to generate this grid-ref (might be a postcode or placename)\r\n            source: 'unknown', //TextGeorefField.GEOREF_SOURCE_UNKNOWN,\r\n            latLng: null,\r\n            precision: null\r\n        };\r\n    };\r\n\r\n    get date() {\r\n        return this.attributes.date || '';\r\n    }\r\n\r\n    get place() {\r\n        return this.attributes.place || '';\r\n    }\r\n\r\n    /**\r\n     * called after the form has changed, before the values have been read back in to the occurrence\r\n     *\r\n     * @param {{form: SurveyForm}} params\r\n     */\r\n    formChangedHandler(params) {\r\n        console.log('Survey change handler invoked.');\r\n\r\n        // read new values\r\n        // then fire its own change event (Occurrence.EVENT_MODIFIED)\r\n        params.form.updateModelFromContent();\r\n\r\n        console.log('Survey calling conditional validation.');\r\n\r\n        // refresh the form's validation state\r\n        params.form.conditionallyValidateForm();\r\n\r\n        this.touch();\r\n        this.fireEvent(Survey.EVENT_MODIFIED, {surveyId : this.id});\r\n    }\r\n\r\n    /**\r\n     * Used for special-case setting of a custom attribute\r\n     * (i.e. not usually one linked to a form)\r\n     * e.g. used for updating the NYPH null-list flag\r\n     *\r\n     * @param attributeName\r\n     * @param value\r\n     */\r\n    setAttribute(attributeName, value) {\r\n        if (this.attributes[attributeName] !== value) {\r\n            this.attributes[attributeName] = value;\r\n\r\n            this.touch();\r\n            this.fireEvent(Survey.EVENT_MODIFIED, {surveyId : this.id});\r\n        }\r\n    }\r\n\r\n    // /**\r\n    //  *\r\n    //  * @param {SurveyForm} form\r\n    //  */\r\n    // registerForm(form) {\r\n    //     form.model = this;\r\n    //     form.addListener('change', this.formChangedHandler.bind(this));\r\n    //\r\n    //     if (this.isNew) {\r\n    //         form.fireEvent('initialisenew', {}); // allows first-time initialisation of dynamic default data, e.g. starting a GPS fix\r\n    //         form.liveValidation = false;\r\n    //     } else {\r\n    //         form.liveValidation = true;\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * if not securely saved then makes a post to /savesurvey.php\r\n     *\r\n     * this may be intercepted by a service worker, which could write the image to indexdb\r\n     * a successful save will result in a json response containing the uri from which the image may be retrieved\r\n     * and also the state of persistence (whether or not the image was intercepted by a service worker while offline)\r\n     *\r\n     * if saving fails then the expectation is that there is no service worker, in which case should attempt to write\r\n     * the image directly to indexdb\r\n     *\r\n     * must test indexdb for this eventuality after the save has returned\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    save() {\r\n        if (!this._savedRemotely) {\r\n            const formData = new FormData;\r\n\r\n            formData.append('type', this.TYPE);\r\n            formData.append('surveyId', this.id);\r\n            formData.append('id', this.id);\r\n            formData.append('projectId', this.projectId.toString());\r\n            formData.append('attributes', JSON.stringify(this.attributes));\r\n            formData.append('deleted', this.deleted.toString());\r\n            formData.append('created', this.createdStamp.toString());\r\n\r\n            console.log('queueing survey post');\r\n            return this.queuePost(formData);\r\n        } else {\r\n            return Promise.reject(`${this.id} has already been saved.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {string} an html-safe string based on the locality and creation date\r\n     */\r\n    generateSurveyName() {\r\n        let place = (this.attributes.place || (this.attributes.georef && this.attributes.georef.gridRef) || '(unlocalised)').trim();\r\n\r\n        const userDate = this.date;\r\n        let dateString;\r\n\r\n        if (userDate) {\r\n            dateString = userDate;\r\n        } else {\r\n            const createdDate = new Date(this.createdStamp * 1000);\r\n\r\n            try {\r\n                // 'default' locale fails on Edge\r\n                dateString = createdDate.toLocaleString('default', {year: 'numeric', month: 'long', day: 'numeric'});\r\n            } catch (e) {\r\n                dateString = createdDate.toLocaleString('en-GB', {year: 'numeric', month: 'long', day: 'numeric'});\r\n            }\r\n        }\r\n\r\n        return `${escapeHTML(place)} ${dateString}`;\r\n    }\r\n}\r\n","import {Model} from \"./Model\";\r\n\r\nexport class OccurrenceImage extends Model {\r\n\r\n    /**\r\n     * raw file object retrieved from a file upload image element\r\n     *\r\n     * @type {File}\r\n     */\r\n    file;\r\n\r\n    /**\r\n     *\r\n     * @type {Map.<string, OccurrenceImage>}\r\n     */\r\n    static imageCache = new Map;\r\n\r\n    TYPE = 'image';\r\n\r\n    /**\r\n     * fetches a url of the image\r\n     * this might be a remote url (or one intercepted by a service worker)\r\n     * or a data url of the raw image, (not yet uploaded)\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getUrl () {\r\n\r\n    }\r\n\r\n    SAVE_ENDPOINT = '/saveimage.php';\r\n\r\n    /**\r\n     *\r\n     * @param {File} file\r\n     */\r\n    static fromFile(file) {\r\n        const image = new OccurrenceImage;\r\n        image.file = file;\r\n\r\n        return image;\r\n    }\r\n\r\n    /**\r\n     * if not securely saved then makes a post to /saveimage.php\r\n     *\r\n     * this may be intercepted by a service worker, which could write the image to indexdb\r\n     * a successful save will result in a json response containing the uri from which the image may be retrieved\r\n     * and also the state of persistence (whether or not the image was intercepted by a service worker while offline)\r\n     *\r\n     * if saving fails then the expectation is that there is no service worker, in which case should attempt to write\r\n     * the image directly to indexdb\r\n     *\r\n     * must test indexdb for this eventuality after the save has returned\r\n     *\r\n     * @param {string} surveyId\r\n     * @param {string} occurrenceId\r\n     * @param {number} projectId\r\n     * @returns {Promise}\r\n     */\r\n    save(surveyId, occurrenceId, projectId) {\r\n        if (!this._savedRemotely) {\r\n\r\n            const formData = new FormData;\r\n            formData.append('type', this.TYPE);\r\n            formData.append('surveyId', surveyId ? surveyId : ''); // avoid 'undefined'\r\n            formData.append('occurrenceId', occurrenceId ? occurrenceId : this.occurrenceId); // avoid 'undefined'\r\n            formData.append('projectId', projectId ? projectId.toString() : '');\r\n            formData.append('imageId', this.id);\r\n            formData.append('id', this.id);\r\n            formData.append('image', this.file);\r\n            formData.append('deleted', this.deleted.toString());\r\n\r\n            console.log(`queueing image post, image id ${this.id}`);\r\n            return this.queuePost(formData);\r\n        } else {\r\n            return Promise.reject(`${this.id} has already been saved.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * fired from Occurrence when the object's contents have been modified\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_MODIFIED = 'modified';\r\n\r\n    /**\r\n     *\r\n     * @param id\r\n     * @returns {OccurrenceImage}\r\n     */\r\n    static placeholder(id) {\r\n        let placeholderObject = new OccurrenceImage;\r\n        placeholderObject._id = id;\r\n\r\n        OccurrenceImage.imageCache.set(id, placeholderObject);\r\n\r\n        return placeholderObject;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {{surveyId: string, occurrenceId: string, [image]: File}} descriptor\r\n     * @private\r\n     */\r\n    _parseDescriptor(descriptor) {\r\n        super._parseDescriptor(descriptor);\r\n        this.surveyId = descriptor.surveyId; // note lower case\r\n        this.occurrenceId = descriptor.occurrenceId; // note lower case\r\n        this.file = descriptor.image;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} id\r\n     * @param {(number|null)} width\r\n     * @param {(number|null)} height\r\n     * @param {{[className] : string}} [attributes]\r\n     * @return {string}\r\n     */\r\n    static imageLink(id, width, height, attributes) {\r\n        width = width || 0;\r\n        height = height || 0;\r\n\r\n        let attributesString = '';\r\n\r\n        if (attributes.className) {\r\n            attributesString += ` class=\"${attributes.className}\"`;\r\n        }\r\n\r\n        const renderingConstraint = (width > height) ?\r\n            `width=\"${width}\"`\r\n            :\r\n            `height=\"${height}\"`;\r\n\r\n        return `<picture><source srcset=\"/image.php?imageid=${id}&amp;height=128&amp;format=webp\" type=\"image/webp\"><img${attributesString} src=\"/image.php?imageid=${id}&amp;width=${width}&amp;height=${height}&amp;format=jpeg\" ${renderingConstraint} alt=\"photo\"></picture>`;\r\n    }\r\n}\r\n","// App.js\r\n// base class for single page application\r\n// allows binding of controllers and routes\r\nimport {EventHarness} from \"./EventHarness\";\r\nimport {Survey} from \"../models/Survey\";\r\nimport {InternalAppError} from \"../utils/exceptions/InternalAppError\";\r\nimport {Occurrence} from \"../models/Occurrence\";\r\nimport localforage from \"localforage\";\r\nimport {OccurrenceImage} from \"../models/OccurrenceImage\";\r\n\r\nexport class App extends EventHarness {\r\n    /**\r\n     * @type {PatchedNavigo}\r\n     */\r\n    #router;\r\n\r\n    /**\r\n     * @type {HTMLElement}\r\n     */\r\n    #containerEl;\r\n\r\n    /**\r\n     *\r\n     * @type {Array.<AppController>}\r\n     */\r\n    controllers = [];\r\n\r\n    /**\r\n     * tracks the handle of the current page controller\r\n     * updating this is the responsibility of the controller\r\n     *\r\n     * @type {number|boolean}\r\n     */\r\n    currentControllerHandle = false;\r\n\r\n    /**\r\n     *\r\n     * @type {Array.<{url : string}>}\r\n     */\r\n    routeHistory = [];\r\n\r\n    /**\r\n     * keyed by occurrence id (a UUID string)\r\n     *\r\n     * @type {Map.<string,Occurrence>}\r\n     */\r\n    occurrences;\r\n\r\n    /**\r\n     * keyed by survey id (a UUID string)\r\n     *\r\n     * @type {Map.<string,Survey>}\r\n     */\r\n    surveys;\r\n\r\n    /**\r\n     * @type {?Survey}\r\n     */\r\n    _currentSurvey = null;\r\n\r\n    /**\r\n     *\r\n     * @param {?Survey} survey\r\n     */\r\n    set currentSurvey(survey) {\r\n        if (this._currentSurvey !== survey) {\r\n            this._currentSurvey = survey || null;\r\n\r\n            let surveyId = survey ? survey.id : null;\r\n            localforage.setItem(App.CURRENT_SURVEY_KEY_NAME, surveyId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {?Survey}\r\n     */\r\n    get currentSurvey() {\r\n        return this._currentSurvey;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Promise<string | null>}\r\n     */\r\n    getLastSurveyId() {\r\n        return localforage.getItem(App.CURRENT_SURVEY_KEY_NAME)\r\n            .catch((error) => {\r\n                console.log({'Error retrieving last survey id' : error});\r\n                return Promise.resolve(null);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @type {Layout}\r\n     */\r\n    layout;\r\n\r\n    /**\r\n     * Event fired when user requests a new blank survey\r\n     * @type {string}\r\n     */\r\n    static EVENT_ADD_SURVEY_USER_REQUEST = 'useraddsurveyrequest';\r\n\r\n    /**\r\n     * Event fired when user requests a reset (local clearance) of all surveys\r\n     * @type {string}\r\n     */\r\n    static EVENT_RESET_SURVEYS = 'userresetsurveys';\r\n\r\n    /**\r\n     * Fired after App.currentSurvey has been set to a new blank survey\r\n     * the survey will be accessible in App.currentSurvey\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_NEW_SURVEY = 'newsurvey';\r\n\r\n    static LOAD_SURVEYS_ENDPOINT = '/loadsurveys.php';\r\n\r\n    static EVENT_OCCURRENCE_ADDED = 'occurrenceadded';\r\n\r\n    /**\r\n     * Fired if the surveys list might need updating (as a survey has been added, removed or changed)\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_SURVEYS_CHANGED = 'surveyschanged';\r\n\r\n    /**\r\n     * Fired after fully-successful sync-all\r\n     * (or if sync-all resolved with nothing to send)\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_ALL_SYNCED_TO_SERVER = 'allsyncedtoserver';\r\n\r\n    /**\r\n     * fired if sync-all called, but one or more objects failed to be saved to the server\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_SYNC_ALL_FAILED = 'syncallfailed';\r\n\r\n    /**\r\n     * IndexedDb key used for storing id of current (last accessed) survey (or null)\r\n     *\r\n     * @type {string}\r\n     */\r\n    static CURRENT_SURVEY_KEY_NAME = 'currentsurvey';\r\n\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    static devMode = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} name\r\n     */\r\n    setLocalForageName(name) {\r\n        localforage.config({\r\n            name: name\r\n        });\r\n    }\r\n\r\n    reset() {\r\n        this.surveys = new Map();\r\n        this.clearCurrentSurvey();\r\n    }\r\n\r\n    /**\r\n     * unset the current survey and its associated list of occurrences\r\n     * called when switching surveys and during startup\r\n     */\r\n    clearCurrentSurvey() {\r\n        this.occurrences = new Map();\r\n        this.currentSurvey = null;\r\n    }\r\n\r\n    /**\r\n     * see https://github.com/krasimir/navigo\r\n     * @param {PatchedNavigo} router\r\n     */\r\n    set router(router) {\r\n        this.#router = router;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {PatchedNavigo}\r\n     */\r\n    get router() {\r\n        return this.#router;\r\n    }\r\n\r\n    set containerId(containerId) {\r\n        const el = document.getElementById(containerId);\r\n        if (!el) {\r\n            throw new Error(`App container '${containerId}' not found.`);\r\n        } else {\r\n            this.#containerEl = el;\r\n        }\r\n    }\r\n\r\n    get container() {\r\n        return this.#containerEl;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {AppController} controller\r\n     */\r\n    registerController(controller) {\r\n        controller.handle = this.controllers.length;\r\n        this.controllers[this.controllers.length] = controller;\r\n\r\n        controller.app = this;\r\n        controller.registerRoute(this.#router);\r\n    }\r\n\r\n    initialise() {\r\n        //Page.initialise_layout(this.#containerEl);\r\n        this.layout.initialise();\r\n\r\n        this.#router.notFound((query) => {\r\n            // called when there is path specified but\r\n            // there is no route matching\r\n\r\n            console.log(`no route found for '${query}'`);\r\n            //this.#router.navigate('/list');\r\n\r\n            // const view = new NotFoundView();\r\n            // view.display();\r\n            this.notFoundView();\r\n        });\r\n\r\n        //default homepage\r\n        this.#router.on(() => {\r\n            // special-case redirect (replacing in history) from '/' to '/list' without updating browser history\r\n\r\n            console.log(\"redirecting from '/' to '/list'\");\r\n\r\n            this.#router.pause();\r\n            //if (this.clearCurrentSurvey && this.currentSurvey.isPristine) { // this appears to be a bug 'this.clearCurrentSurvey'\r\n            // rather than 'this.clearCurrentSurvey()' is nonsensical\r\n            // and if clearCurrentSurvey() was actually called then the isPristine test would fail (called on null)\r\n            if (this.currentSurvey && this.currentSurvey.isPristine) {\r\n                this.#router.navigate('/list/survey/welcome').resume();\r\n            } else {\r\n                this.#router.navigate('/list').resume();\r\n            }\r\n            this.#router.resolve();\r\n        });\r\n\r\n        for (let controller of this.controllers) {\r\n            controller.initialise();\r\n        }\r\n    }\r\n\r\n    display() {\r\n        console.log('App display');\r\n        this.#router.resolve();\r\n\r\n        // it's opportune at this point to try to ping the server again to save anything left outstanding\r\n        this.syncAll();\r\n    }\r\n\r\n    saveRoute() {\r\n        const lastRoute = this.#router.lastRouteResolved();\r\n        if (this.routeHistory.length) {\r\n            if (this.routeHistory[this.routeHistory.length - 1] !== lastRoute) {\r\n                this.routeHistory[this.routeHistory.length] = lastRoute;\r\n            }\r\n        } else {\r\n            this.routeHistory[0] = lastRoute;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * mark the current survey and its constituent records as subject to validation checks (not pristine)\r\n     */\r\n    markAllNotPristine() {\r\n        for (let occurrenceTuple of this.occurrences) {\r\n            occurrenceTuple[1].isPristine = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Layout} layout\r\n     */\r\n    setLayout(layout) {\r\n        this.layout = layout;\r\n        layout.setApp(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Survey} survey\r\n     */\r\n    addSurvey(survey) {\r\n        if (survey.projectId !== this.projectId) {\r\n            throw new Error(`Survey project id '${survey.projectId} does not match with current project ('${this.projectId}')`);\r\n        }\r\n\r\n        //if (!this.surveys.has(survey.id)) {\r\n        if (!survey.hasAppModifiedListener) {\r\n            survey.hasAppModifiedListener = true;\r\n\r\n            console.log(\"setting survey's modified/save handler\");\r\n            survey.addListener(\r\n                Survey.EVENT_MODIFIED,\r\n                () => {\r\n                    this.fireEvent(App.EVENT_SURVEYS_CHANGED);\r\n                    return survey.save();\r\n                }\r\n            );\r\n        }\r\n\r\n        this.surveys.set(survey.id, survey);\r\n        this.fireEvent(App.EVENT_SURVEYS_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * tests whether occurrences have been defined, excluding any that have been deleted\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    haveExtantOccurrences() {\r\n        for (let occurrence of this.occurrences) {\r\n            if (!occurrence.deleted) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Occurrence} occurrence\r\n     */\r\n    addOccurrence(occurrence) {\r\n        if (!occurrence.surveyId) {\r\n            throw new InternalAppError('Survey id must set prior to registering occurrence.');\r\n        }\r\n\r\n        if (this.occurrences.size === 0) {\r\n            // this is the first occurrence added, set the survey creation stamp to match\r\n            // this avoids anomalies where a 'stale' survey created when the form was first opened but not used sits around\r\n            // for a protracted period\r\n\r\n            const survey = this.surveys.get(occurrence.surveyId);\r\n            survey.createdStamp = occurrence.createdStamp;\r\n        }\r\n        console.log(`in addOccurrence setting id '${occurrence.id}'`);\r\n        this.occurrences.set(occurrence.id, occurrence);\r\n\r\n        occurrence.addListener(Occurrence.EVENT_MODIFIED,\r\n            // possibly this should be async, with await on the survey and occurrence save\r\n            () => {\r\n                const survey = this.surveys.get(occurrence.surveyId);\r\n                if (!survey) {\r\n                    throw new Error(`Failed to look up survey id ${occurrence.surveyId}`);\r\n                } else {\r\n                    survey.isPristine = false;\r\n\r\n                    // need to ensure that currentSurvey is saved before occurrence\r\n                    // rather than using a promise chain here, instead rely on enforced queuing of post requests in Model\r\n                    // otherwise there are problems with queue-jumping (e.g. when an image needs to be saved after both previous requests)\r\n                    if (survey.unsaved()) {\r\n                        // noinspection JSIgnoredPromiseFromCall\r\n                        survey.save();\r\n                    }\r\n                    occurrence.save(survey.id);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * attempts to refresh the state of local storage for the specified survey ids\r\n     * if fetch fails then return a failed promise\r\n     *\r\n     * updates local copy of surveys and occurrences\r\n     *\r\n     * no service worker interception of this call - passed through and not cached\r\n     *\r\n     * @param {Array.<string>} surveyIds\r\n     * @return {Promise}\r\n     */\r\n    refreshFromServer(surveyIds) {\r\n        console.log({'Refresh from server, ids' : surveyIds});\r\n        const formData = new FormData;\r\n\r\n        let n = 0;\r\n        for (let key of surveyIds) {\r\n            if (key && key !== 'undefined') {\r\n                formData.append(`surveyId[${n++}]`, key);\r\n            }\r\n        }\r\n\r\n        return fetch(App.LOAD_SURVEYS_ENDPOINT, {\r\n            method: 'POST',\r\n            body: formData\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            } else {\r\n                return Promise.reject(`Invalid response from server when refreshing survey ids`);\r\n            }\r\n        }).then((jsonResponse) => {\r\n            /** @param {{survey : Array.<object>, occurrence: Array.<object>, image: Array.<object>}} jsonResponse */\r\n\r\n            console.log({'refresh from server json response' : jsonResponse});\r\n\r\n            // if external objects newer than local version then place in local storage\r\n            const promises = [];\r\n\r\n            for (let type in jsonResponse) {\r\n                if (jsonResponse.hasOwnProperty(type)) {\r\n                    for (let object of jsonResponse[type]) {\r\n                        promises.push(this._conditionallyReplaceObject(object));\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            return Promise.all(promises);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * compare modified stamp of indexeddb and external objects and write external version locally if more recent\r\n     *\r\n     * @param {{id : string, type : string, modified : number, created : number, saveState : string, deleted : boolean}} externalVersion\r\n     * @returns {Promise}\r\n     * @private\r\n     */\r\n    _conditionallyReplaceObject(externalVersion) {\r\n        const objectType = externalVersion.type;\r\n        const id = externalVersion.id;\r\n        const key = `${objectType}.${id}`;\r\n\r\n        return localforage.getItem(key)\r\n            .then((localVersion) => {\r\n                if (localVersion) {\r\n                    // compare stamps\r\n\r\n                    // if (externalVersion.deleted) {\r\n                    //     // if the external copy is deleted then remove the local copy\r\n                    //     return localforage.removeItem(key);\r\n                    // }\r\n\r\n                    if (!externalVersion.deleted && localVersion.modified >= externalVersion.modified) {\r\n                        console.log(`Local copy of ${key} is the same or newer than the server copy. (${localVersion.modified} >= ${externalVersion.modified}) `);\r\n                        return Promise.resolve();\r\n                    }\r\n                }\r\n\r\n                // no local copy or stale copy\r\n                // so store response locally\r\n                console.log(`Adding or replacing local copy of ${key}`);\r\n                return localforage.setItem(key, externalVersion);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * retrieve the full set of keys from local storage (IndexedDb)\r\n     *\r\n     * @param {{survey: Array.<string>, occurrence : Array.<string>, image: Array.<string>}} storedObjectKeys\r\n     * @returns {Promise}\r\n     */\r\n    seekKeys(storedObjectKeys) {\r\n        console.log('starting seekKeys');\r\n        return localforage.keys().then((keys) => {\r\n            console.log({\"in seekKeys: local forage keys\" : keys});\r\n\r\n            for (let key of keys) {\r\n                if (key !== App.CURRENT_SURVEY_KEY_NAME) {\r\n                    let type, id;\r\n\r\n                    [type, id] = key.split('.', 2);\r\n\r\n                    if (storedObjectKeys.hasOwnProperty(type)) {\r\n                        if (!storedObjectKeys[type].includes(id)) {\r\n                            storedObjectKeys[type].push(id);\r\n                        }\r\n                    } else {\r\n                        console.log(`Unrecognised stored key type '${type}.`);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return storedObjectKeys;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise}\r\n     */\r\n    syncAll() {\r\n        const storedObjectKeys = {\r\n            survey : [],\r\n            occurrence : [],\r\n            image : []\r\n        };\r\n\r\n        return this.seekKeys(storedObjectKeys)\r\n            .then((storedObjectKeys) => {\r\n                return this._syncLocalUnsaved(storedObjectKeys)\r\n                    .then((result) => {\r\n                        this.fireEvent(App.EVENT_ALL_SYNCED_TO_SERVER);\r\n\r\n                        return result;\r\n                    });\r\n            }, (failedResult) => {\r\n                console.log(`Failed to sync all: ${failedResult}`);\r\n                this.fireEvent(App.EVENT_SYNC_ALL_FAILED);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param storedObjectKeys\r\n     * @returns {Promise}\r\n     * @private\r\n     */\r\n    _syncLocalUnsaved(storedObjectKeys) {\r\n        // synchronises surveys first, then occurrences, then images from indexedDb\r\n\r\n        const promises = [];\r\n        for(let surveyKey of storedObjectKeys.survey) {\r\n            promises.push(Survey.retrieveFromLocal(surveyKey, new Survey)\r\n                .then((survey) => {\r\n                    if (survey.unsaved()) {\r\n                        return survey.save();\r\n                    }\r\n                })\r\n            );\r\n        }\r\n\r\n        for(let occurrenceKey of storedObjectKeys.occurrence) {\r\n            promises.push(Occurrence.retrieveFromLocal(occurrenceKey, new Occurrence)\r\n                .then((occurrence) => {\r\n                    if (occurrence.unsaved()) {\r\n                        return occurrence.save();\r\n                    }\r\n                })\r\n            );\r\n        }\r\n\r\n        for(let imageKey of storedObjectKeys.image) {\r\n            promises.push(OccurrenceImage.retrieveFromLocal(imageKey, new OccurrenceImage)\r\n                .then((image) => {\r\n                    if (image.unsaved()) {\r\n                        return image.save();\r\n                    }\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).catch((result) => {\r\n            console.log(`Save failure: ${result}`);\r\n            return Promise.reject(result); // pass on the failed save (catch was only for logging, not to allow subsequent success)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * restore previous state, pulling back from local and external store\r\n     * @todo this needs a save phase, so that local changes are saved back to the server\r\n     *\r\n     * @param {string} [targetSurveyId] if specified then select this id as the current survey\r\n     * @return {Promise}\r\n     */\r\n    restoreOccurrences(targetSurveyId = '') {\r\n\r\n        console.log(`Invoked restoreOccurrences, target survey id: ${targetSurveyId}`);\r\n\r\n        if (targetSurveyId === 'undefined') {\r\n            console.error(`Attempt to restore occurrences for literal 'undefined' survey id.`);\r\n            targetSurveyId = '';\r\n        }\r\n\r\n        return (targetSurveyId) ?\r\n            this._restoreOccurrenceImp(targetSurveyId)\r\n            :\r\n            this.getLastSurveyId().then(\r\n                (lastSurveyId) => {\r\n                    console.log(`Retrieved last used survey id '${lastSurveyId}'`);\r\n\r\n                    return this._restoreOccurrenceImp(lastSurveyId).catch(() => {\r\n                        console.log(`Failed to retrieve lastSurveyId ${lastSurveyId}. Resetting current survey and retrying.`);\r\n\r\n                        this.currentSurvey = null;\r\n                        return this._restoreOccurrenceImp();\r\n                    });\r\n                },\r\n                () => this._restoreOccurrenceImp()\r\n            );\r\n    }\r\n\r\n    _restoreOccurrenceImp(targetSurveyId) {\r\n        // need to check for a special case where restoring a survey that has never been saved even locally\r\n        // i.e. new and unmodified\r\n        // only present in current App.surveys\r\n        // this occurs if user creates a new survey, makes no changes, switches away from it then switches back\r\n        if (targetSurveyId && this.surveys.has(targetSurveyId)) {\r\n            const localSurvey = this.surveys.get(targetSurveyId);\r\n\r\n            if (localSurvey.isPristine) {\r\n                this.clearCurrentSurvey(); // clear occurrences from the previous survey\r\n\r\n                this.currentSurvey = localSurvey;\r\n                this.fireEvent(App.EVENT_SURVEYS_CHANGED); // current survey should be set now, so menu needs refresh\r\n                return Promise.resolve();\r\n            }\r\n        }\r\n\r\n        const storedObjectKeys = {\r\n            survey: [],\r\n            occurrence: [],\r\n            image: []\r\n        };\r\n\r\n        if (targetSurveyId) {\r\n            storedObjectKeys.survey[0] = targetSurveyId;\r\n        }\r\n\r\n        return this.seekKeys(storedObjectKeys).then((storedObjectKeys) => {\r\n            if (storedObjectKeys.survey.length) {\r\n                return this.refreshFromServer(storedObjectKeys.survey).finally(() => {\r\n                    // re-seek keys from indexed db, to take account of any new occurrences received from the server\r\n                    return this.seekKeys(storedObjectKeys);\r\n                });\r\n            } else {\r\n                return null;\r\n            }\r\n        }).finally(() => {\r\n            // called regardless of whether a server refresh was successful\r\n            // storedObjectKeys and indexed db should be as up-to-date as possible\r\n\r\n            console.log({storedObjectKeys});\r\n\r\n            if (storedObjectKeys && storedObjectKeys.survey && storedObjectKeys.survey.length) {\r\n\r\n                const surveyFetchingPromises = [];\r\n                let n = 0;\r\n\r\n                for (let surveyKey of storedObjectKeys.survey) {\r\n                    // arbitrarily set first survey key as current if a target id hasn't been specified\r\n\r\n                    surveyFetchingPromises.push(\r\n                        this._restoreSurveyFromLocal(surveyKey, storedObjectKeys, (targetSurveyId === surveyKey) || (!targetSurveyId && n++ === 0))\r\n                    );\r\n                }\r\n\r\n                return Promise.all(surveyFetchingPromises)\r\n                    .finally(() => {\r\n                        //this.currentSurvey = this.surveys.get(storedObjectKeys.survey[0]);\r\n\r\n                        if (!this.currentSurvey) {\r\n                            // survey doesn't actually exist\r\n                            // this could have happened in an invalid survey id was provided as a targetSurveyId\r\n                            console.log(`Failed to retrieve survey id '${targetSurveyId}'`);\r\n                            return Promise.reject(new Error(`Failed to retrieve survey id '${targetSurveyId}'`));\r\n                        }\r\n\r\n                        if (this.currentSurvey.deleted) {\r\n                            // unusual case where survey is deleted\r\n                            // substitute a new one\r\n\r\n                            // this should probably never happen, as items deleted on the server ought to have been\r\n                            // removed locally\r\n                            this.setNewSurvey();\r\n                        } else {\r\n                            this.fireEvent(App.EVENT_SURVEYS_CHANGED); // current survey should be set now, so menu needs refresh\r\n                        }\r\n                        return Promise.resolve();\r\n                    });\r\n            } else {\r\n                console.log('no pre-existing surveys, so creating a new one');\r\n                // no pre-existing surveys, so create a new one\r\n                this.setNewSurvey();\r\n\r\n                return Promise.resolve();\r\n            }\r\n        });\r\n    }\r\n\r\n    setNewSurvey() {\r\n        this.currentSurvey = new Survey();\r\n        this.currentSurvey.projectId = this.projectId;\r\n        this.currentSurvey.isPristine = true;\r\n        this.currentSurvey.isNew = true;\r\n\r\n        this.fireEvent(App.EVENT_NEW_SURVEY);\r\n\r\n        this.addSurvey(this.currentSurvey);\r\n    }\r\n\r\n    /**\r\n     * @return {Occurrence}\r\n     */\r\n    addNewOccurrence() {\r\n        const occurrence = new Occurrence();\r\n        occurrence.surveyId = this.currentSurvey.id;\r\n        occurrence.projectId = this.projectId;\r\n\r\n        occurrence.isNew = true;\r\n        occurrence.isPristine = true;\r\n\r\n        this.addOccurrence(occurrence);\r\n\r\n        this.fireEvent(App.EVENT_OCCURRENCE_ADDED, {occurrenceId: occurrence.id, surveyId: occurrence.surveyId});\r\n\r\n        return occurrence;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} surveyId\r\n     * @param {{survey: Array, occurrence: Array, image: Array}} storedObjectKeys\r\n     * @param {boolean} setAsCurrent\r\n     * @returns {Promise}\r\n     * @private\r\n     */\r\n    _restoreSurveyFromLocal(surveyId, storedObjectKeys, setAsCurrent) {\r\n        // retrieve surveys first, then occurrences, then images from indexedDb\r\n\r\n        let promise = Survey.retrieveFromLocal(surveyId, new Survey).then((survey) => {\r\n            console.log(`retrieving local survey ${surveyId}`);\r\n\r\n            if (setAsCurrent) {\r\n                // the apps occurrences should only relate to the current survey\r\n                // (the reset are remote or in IndexedDb)\r\n                this.clearCurrentSurvey();\r\n\r\n                this.addSurvey(survey);\r\n                const occurrenceFetchingPromises = [];\r\n\r\n                for (let occurrenceKey of storedObjectKeys.occurrence) {\r\n                    occurrenceFetchingPromises.push(Occurrence.retrieveFromLocal(occurrenceKey, new Occurrence)\r\n                        .then((occurrence) => {\r\n                            if (occurrence.surveyId === surveyId) {\r\n                                console.log(`adding occurrence ${occurrenceKey}`);\r\n                                this.addOccurrence(occurrence);\r\n                            }\r\n                        }));\r\n                }\r\n\r\n                return Promise.all(occurrenceFetchingPromises);\r\n            } else {\r\n                // not the current survey, so just add it but don't load occurrences\r\n                this.addSurvey(survey);\r\n            }\r\n        });\r\n\r\n        if (setAsCurrent) {\r\n            promise.finally(() => {\r\n                //console.log('Reached image fetching part');\r\n                const imageFetchingPromises = [];\r\n\r\n                for (let occurrenceImageKey of storedObjectKeys.image) {\r\n                    imageFetchingPromises.push(OccurrenceImage.retrieveFromLocal(occurrenceImageKey, new OccurrenceImage)\r\n                        .then((occurrenceImage) => {\r\n                            console.log(`restoring image id '${occurrenceImageKey}'`);\r\n\r\n                            if (occurrenceImage.surveyId === surveyId) {\r\n                                OccurrenceImage.imageCache.set(occurrenceImageKey, occurrenceImage);\r\n                            }\r\n                        }, (reason) => {\r\n                            console.log(`Failed to retrieve an image: ${reason}`);\r\n                        }));\r\n                }\r\n\r\n                this.currentSurvey = this.surveys.get(storedObjectKeys.survey[0]);\r\n\r\n                return Promise.all(imageFetchingPromises);\r\n            });\r\n        }\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    clearLocalForage() {\r\n        return localforage.clear();\r\n    }\r\n}\r\n\r\n","// SurveyPickerController\r\n//\r\n\r\nimport {AppController} from './AppController';\r\nimport {NotFoundError} from \"../utils/exceptions/NotFoundError\";\r\nimport {UUID_REGEX} from \"../models/Model\";\r\n//import {Layout} from \"../views/layout/Layout\";\r\nimport {App} from \"../framework/App\";\r\n//import Modal from 'bootstrap/js/dist/modal';\r\n\r\nexport class SurveyPickerController extends AppController {\r\n    route = '/survey/:action/:id';\r\n\r\n    static EVENT_BACK = 'back';\r\n\r\n    title = 'Survey picker';\r\n\r\n    /**\r\n     * @type {App}\r\n     */\r\n    app;\r\n\r\n    /**\r\n     *\r\n     * @type {SurveyPickerView}\r\n     */\r\n    view;\r\n\r\n    /**\r\n     *\r\n     * @returns {Survey}\r\n     */\r\n    get survey() {\r\n        return this.app.currentSurvey;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {SurveyPickerView} view\r\n     */\r\n    constructor (view) {\r\n        super();\r\n\r\n        this.view = view;\r\n        view.controller = this;\r\n\r\n        this.handle = AppController.nextHandle;\r\n    }\r\n\r\n    /**\r\n     * registers the default route from this.route\r\n     * or alternatively is overridden in a child class\r\n     *\r\n     * @param {PatchedNavigo} router\r\n     */\r\n    registerRoute(router) {\r\n        router.on(\r\n            '/survey',\r\n            this.mainRouteHandler.bind(this, 'survey', '', ''),\r\n            {\r\n                // before : this.beforeRouteHandler ? this.beforeRouteHandler.bind(this) : null,\r\n                // after : this.afterRouteHandler ? this.afterRouteHandler.bind(this) : null,\r\n                // leave : this.leaveRouteHandler ? this.leaveRouteHandler.bind(this) : null,\r\n                // already : this.alreadyRouteHandler ? this.alreadyRouteHandler.bind(this) : null\r\n            }\r\n        );\r\n\r\n        router.on(\r\n            '/survey/new',\r\n            this.newSurveyHandler.bind(this, 'survey', 'new', ''),\r\n            {\r\n                before : this.beforeNewHandler.bind(this)\r\n            }\r\n        );\r\n\r\n        router.on(\r\n            '/survey/reset',\r\n            this.mainRouteHandler.bind(this, 'survey', 'reset', ''),\r\n            {\r\n                before : this.beforeResetHandler.bind(this)\r\n            }\r\n        );\r\n\r\n        router.on(\r\n            '/survey/save',\r\n            this.mainRouteHandler.bind(this, 'survey', 'save', ''),\r\n            {\r\n                before : this.beforeSaveAllHandler.bind(this)\r\n            }\r\n        );\r\n\r\n        router.on(\r\n            '/survey/add/:surveyId',\r\n            this.addSurveyHandler.bind(this, 'survey', 'add', '')\r\n        );\r\n\r\n        this.app.addListener(App.EVENT_ADD_SURVEY_USER_REQUEST, this.addNewSurveyHandler.bind(this));\r\n        this.app.addListener(App.EVENT_RESET_SURVEYS, this.resetSurveysHandler.bind(this));\r\n    }\r\n\r\n    beforeNewHandler(done) {\r\n        //$(`#${Layout.NEW_SURVEY_MODAL_ID}`).modal();\r\n        //Modal.getOrCreateInstance(Layout.NEW_SURVEY_MODAL_ID).show();\r\n        this.view.newSurveyDialog();\r\n\r\n        this.app.router.pause();\r\n\r\n        console.log({'route history' : this.app.routeHistory});\r\n\r\n        if (window.history.state) {\r\n            window.history.back(); // this could fail if previous url was not under the single-page-app umbrella (should test)\r\n        }\r\n        this.app.router.resume();\r\n\r\n        done(false); // block navigation\r\n    }\r\n\r\n    beforeResetHandler(done) {\r\n        //$(`#${Layout.RESET_MODAL_ID}`).modal();\r\n        //Modal.getOrCreateInstance(Layout.RESET_MODAL_ID).show();\r\n        this.view.showResetDialog();\r\n\r\n        this.app.router.pause();\r\n        if (window.history.state) {\r\n            window.history.back(); // this could fail if previous url was not under the single-page-app umbrella (should test)\r\n        }\r\n        this.app.router.resume();\r\n\r\n        done(false); // block navigation\r\n    }\r\n\r\n    beforeSaveAllHandler(done) {\r\n        // invoke sync of any/all unsaved data\r\n        // show pop-ups on success and failure\r\n        this.app.syncAll().then((result) => {\r\n            console.log({'In save all handler, success result' : result});\r\n\r\n            if (Array.isArray(result)) {\r\n                //$(`#${Layout.SAVE_ALL_SUCCESS_MODAL_ID}`).modal();\r\n                //Modal.getOrCreateInstance(Layout.SAVE_ALL_SUCCESS_MODAL_ID).show();\r\n                this.view.showSaveAllSuccess();\r\n            } else {\r\n                //$(`#${Layout.SAVE_ALL_FAILURE_MODAL_ID}`).modal();\r\n                //Modal.getOrCreateInstance(Layout.SAVE_ALL_FAILURE_MODAL_ID).show();\r\n                this.view.showSaveAllFailure();\r\n            }\r\n        }, (result) => {\r\n            console.log({'In save all handler, failure result' : result});\r\n            //$(`#${Layout.SAVE_ALL_FAILURE_MODAL_ID}`).modal();\r\n            //Modal.getOrCreateInstance(Layout.SAVE_ALL_FAILURE_MODAL_ID).show();\r\n            this.view.showSaveAllFailure();\r\n        }).finally(() => {\r\n            // stop the spinner\r\n\r\n        });\r\n\r\n        this.app.router.pause();\r\n        if (window.history.state) {\r\n            window.history.back(); // this could fail if previous url was not under the single-page-app umbrella (should test)\r\n        }\r\n        this.app.router.resume();\r\n\r\n        done(false); // block navigation\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} context typically 'survey'\r\n     * @param {('new'|'')} subcontext\r\n     * @param {(''|'help')} rhs currently not used\r\n     * @param {Object.<string, string>} queryParameters surveyId\r\n     */\r\n    newSurveyHandler(context, subcontext, rhs, queryParameters) {\r\n        // should not get here, as beforeNewHandler ought to have been invoked first\r\n    }\r\n\r\n    /**\r\n     * called after user has confirmed add new survey dialog box\r\n     *\r\n     */\r\n    addNewSurveyHandler() {\r\n        console.log(\"reached addNewSurveyHandler\");\r\n        this.app.currentControllerHandle = this.handle; // when navigate back need to list need to ensure full view refresh\r\n\r\n        // the apps occurrences should only relate to the current survey\r\n        // (the reset are remote or in IndexedDb)\r\n        this.app.clearCurrentSurvey();\r\n\r\n        this.app.setNewSurvey();\r\n\r\n        // it's opportune at this point to try to ping the server again to save anything left outstanding\r\n        this.app.syncAll();\r\n\r\n        this.app.router.pause();\r\n        this.app.router.navigate('/list/survey/about').resume(); // jump straight into the survey rather than to welcome stage\r\n        this.app.router.resolve();\r\n    }\r\n\r\n    /**\r\n     * called after user has confirmed reset surveys dialog box\r\n     */\r\n    resetSurveysHandler() {\r\n        this.app.clearLocalForage().then(() => {\r\n            this.app.reset();\r\n            this.addNewSurveyHandler();\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} context typically 'survey'\r\n     * @param {('add'|'')} subcontext\r\n     * @param {(''|'help')} rhs currently not used\r\n     * @param {Object.<string, string>} queryParameters surveyId\r\n     */\r\n    addSurveyHandler(context, subcontext, rhs, queryParameters) {\r\n        console.log(\"reached addSurveyHandler\");\r\n        console.log({context: context, params: subcontext, query: queryParameters});\r\n\r\n        this.app.currentControllerHandle = this.handle; // when navigate back need to list need to ensure full view refresh\r\n\r\n        let surveyId = queryParameters.surveyId;\r\n\r\n        if (!surveyId || !surveyId.match(UUID_REGEX)) {\r\n            throw new NotFoundError(`Failed to match survey id '${surveyId}', the id format appears to be incorrect`);\r\n        }\r\n\r\n        surveyId = surveyId.toLowerCase();\r\n\r\n        this.app.restoreOccurrences(surveyId)\r\n            .then(() => {\r\n                this.app.markAllNotPristine();\r\n\r\n                this.app.router.pause();\r\n                this.app.router.navigate('/list').resume();\r\n                this.app.router.resolve();\r\n            }, (error) => {\r\n                console.log({'failed survey restoration' : error});\r\n\r\n                // should display a modal error message\r\n                // either the survey was not found or there was no network connection\r\n\r\n                // should switch to displaying a list of available surveys and an option to start a new survey\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} context typically 'survey'\r\n     * @param {('add'|'')} subcontext\r\n     * @param {(''|'help')} rhs currently not used\r\n     * @param {Object.<string, string>} queryParameters surveyId\r\n     */\r\n    mainRouteHandler(context, subcontext, rhs, queryParameters) {\r\n        console.log(\"reached special route handler for SurveyPickerController.js\");\r\n        console.log({context: context, params: subcontext, query: queryParameters});\r\n    }\r\n}\r\n","import {SAVE_STATE_LOCAL} from \"../../models/Model\";\r\n\r\nexport class ResponseFactory {\r\n    static responses = {};\r\n\r\n    /**\r\n     *\r\n     * @param {FormData} formData\r\n     * @returns {LocalResponse}\r\n     */\r\n    static fromPostedData(formData) {\r\n        /**\r\n         * the object that will be saved to IndexedDb\r\n         *\r\n         * this needs to be in scope for several stages of the promise chain\r\n         * @type {{[saved]: string, [type]: string, [imageId]: string, [surveyId]: string, [occurrenceId]: string, [image]: file, [projectId]: number, saveState: string }}\r\n         */\r\n        const toSaveLocally = {\r\n            saveState: SAVE_STATE_LOCAL // mark as not saved externally\r\n        };\r\n\r\n        for(let pair of formData.entries()) {\r\n            toSaveLocally[pair[0]] = pair[1];\r\n        }\r\n\r\n        if (!toSaveLocally.type) {\r\n            throw new Error('Missing type in form data.');\r\n        }\r\n\r\n        if (ResponseFactory.responses.hasOwnProperty(toSaveLocally.type)) {\r\n            return new ResponseFactory.responses[toSaveLocally.type](toSaveLocally, {});\r\n        } else {\r\n            throw new Error(`Unrecognised post type '${toSaveLocally.type}'`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {{}} returnedToClient\r\n     */\r\n    static fromPostResponse(returnedToClient) {\r\n        if (!returnedToClient) {\r\n            throw new Error('Invalid empty post response.');\r\n        }\r\n\r\n        if (!returnedToClient.type) {\r\n            throw new Error('Missing type in returned response.');\r\n        }\r\n\r\n        if (ResponseFactory.responses.hasOwnProperty(returnedToClient.type)) {\r\n            console.log(`in fromPostResponse returning a ${returnedToClient.type}`);\r\n            return new ResponseFactory.responses[returnedToClient.type]({}, returnedToClient);\r\n        } else {\r\n            throw new Error(`Unrecognised post type '${returnedToClient.type}'`);\r\n        }\r\n    }\r\n}\r\n","export function packageClientResponse (returnedToClient) {\r\n    const headers = new Headers;\r\n    headers.set('Content-Type', 'application/json');\r\n\r\n    return new Response(\r\n        JSON.stringify(returnedToClient),\r\n        {\r\n            status: returnedToClient.error ? 500 : 200,\r\n            headers\r\n        });\r\n}","import localforage from \"localforage\";\r\nimport {packageClientResponse} from \"../packageClientResponse\";\r\n\r\nexport class LocalResponse {\r\n    toSaveLocally;\r\n    returnedToClient;\r\n\r\n    /**\r\n     * @type {Response}\r\n     */\r\n    prebuiltResponse;\r\n\r\n    failureErrorMessage = 'Failed to save a local copy on your device.';\r\n    failureErrorHelp = 'Your internet connection may have failed (or there could be a problem with the server). ' +\r\n        'It wasn\\'t possible to save a temporary copy on your device. Perhaps there is insufficient space? ' +\r\n        'Please try to re-establish a network connection and try again.';\r\n\r\n    constructor(toSaveLocally, returnedToClient) {\r\n        this.toSaveLocally = toSaveLocally;\r\n        this.returnedToClient = returnedToClient;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Response} prebuiltResponse\r\n     * @returns this\r\n     */\r\n    setPrebuiltResponse(prebuiltResponse) {\r\n        this.prebuiltResponse = prebuiltResponse;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Promise<Response>}\r\n     */\r\n    storeLocally() {\r\n        return localforage.setItem(this.localKey(), this.toSaveLocally).then(() => {\r\n                console.log(`Stored object ${this.localKey()} locally`);\r\n                return this.prebuiltResponse ? this.prebuiltResponse : packageClientResponse(this.returnedToClient);\r\n            },\r\n            (reason) => {\r\n                console.log(`Failed to store object ${this.localKey()} locally`);\r\n                console.log({reason});\r\n                this.returnedToClient.error = this.failureErrorMessage;\r\n                this.returnedToClient.errorHelp = this.failureErrorHelp;\r\n\r\n                return packageClientResponse(this.returnedToClient);\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n     * @return {string}\r\n     */\r\n    localKey () {\r\n        throw new Error(`LocalKey must be implemented in a subclass for ${this.toSaveLocally.type}`);\r\n    }\r\n\r\n    /**\r\n     * called to build the response to the post that is returned to the client\r\n     * in the absence of the remote server\r\n     *\r\n     * @returns {this}\r\n     * @abstract\r\n     */\r\n    populateClientResponse() {\r\n    }\r\n}\r\n","import {ResponseFactory} from \"./ResponseFactory\";\r\nimport {LocalResponse} from \"./LocalResponse\";\r\nimport {SAVE_STATE_LOCAL, SAVE_STATE_SERVER} from \"../../models/Model\";\r\n\r\nexport class ImageResponse extends LocalResponse {\r\n    failureErrorMessage = 'Failed to store image.';\r\n    failureErrorHelp = 'Your internet connection may have failed (or there could be a problem with the server). ' +\r\n        'It wasn\\'t possible to save a temporary copy on your device. Perhaps there is insufficient space? ' +\r\n        'Please try to re-establish a network connection and try again.';\r\n\r\n    /**\r\n     * called to build the response to the post that is returned to the client\r\n     * in the absence of the remote server\r\n     *\r\n     * @returns {this}\r\n     */\r\n    populateClientResponse() {\r\n        this.returnedToClient.id = this.toSaveLocally.imageId ? this.toSaveLocally.imageId : this.toSaveLocally.id;\r\n        this.returnedToClient.imageId = this.toSaveLocally.imageId ? this.toSaveLocally.imageId : this.toSaveLocally.id;\r\n        this.returnedToClient.type = 'image';\r\n        this.returnedToClient.surveyId = this.toSaveLocally.surveyId;\r\n        this.returnedToClient.occurrenceId = this.toSaveLocally.occurrenceId;\r\n        this.returnedToClient.created = parseInt(this.toSaveLocally.created, 10); // stamps from server always take precedence\r\n        this.returnedToClient.modified = parseInt(this.toSaveLocally.modified, 10);\r\n        this.returnedToClient.saveState = SAVE_STATE_LOCAL;\r\n        this.returnedToClient.deleted = this.toSaveLocally.deleted;\r\n        this.returnedToClient.projectId = parseInt(this.toSaveLocally.projectId, 10);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * called to mirror a response from the server locally\r\n     *\r\n     * @returns {this}\r\n     */\r\n    populateLocalSave() {\r\n        this.toSaveLocally.surveyId = this.returnedToClient.surveyId;\r\n        this.toSaveLocally.type = 'image';\r\n        this.toSaveLocally.occurrenceId = this.returnedToClient.occurrenceId;\r\n        this.toSaveLocally.imageId = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.imageId; // hedging\r\n        this.toSaveLocally.id = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.imageId; // hedging\r\n        this.toSaveLocally.created = parseInt(this.returnedToClient.created, 10); // stamps from server always take precedence\r\n        this.toSaveLocally.modified = parseInt(this.returnedToClient.modified, 10);\r\n        this.toSaveLocally.saveState = SAVE_STATE_SERVER;\r\n        this.toSaveLocally.deleted = (this.returnedToClient.deleted === true || this.returnedToClient.deleted === 'true');\r\n        this.toSaveLocally.projectId = parseInt(this.returnedToClient.projectId, 10);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {string}\r\n     */\r\n    localKey() {\r\n        return `image.${this.toSaveLocally.imageId}`;\r\n    }\r\n\r\n    static register() {\r\n        ResponseFactory.responses.image = ImageResponse;\r\n    }\r\n}\r\n","import {ResponseFactory} from \"./ResponseFactory\";\r\nimport {LocalResponse} from \"./LocalResponse\";\r\nimport {SAVE_STATE_LOCAL, SAVE_STATE_SERVER} from \"../../models/Model\";\r\n\r\nexport class SurveyResponse extends LocalResponse {\r\n    failureErrorMessage = 'Failed to store survey.';\r\n    failureErrorHelp = 'Your internet connection may have failed (or there could be a problem with the server). ' +\r\n        'It wasn\\'t possible to save a temporary copy on your device. Perhaps there is insufficient space? ' +\r\n        'Please try to re-establish a network connection and try again.';\r\n\r\n    /**\r\n     * called to build the response to the post that is returned to the client\r\n     * in the absence of the remote server\r\n     *\r\n     * @returns {this}\r\n     */\r\n    populateClientResponse() {\r\n        this.toSaveLocally.surveyId = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.surveyId; // hedging\r\n        this.toSaveLocally.id = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.surveyId; // hedging\r\n        this.returnedToClient.type = 'survey';\r\n        this.returnedToClient.attributes = this.toSaveLocally.attributes;\r\n        this.returnedToClient.created = this.toSaveLocally.created; // stamps from server always take precedence\r\n        this.returnedToClient.modified = this.toSaveLocally.modified;\r\n        this.returnedToClient.saveState = SAVE_STATE_LOCAL;\r\n        this.returnedToClient.deleted = this.toSaveLocally.deleted;\r\n        this.returnedToClient.projectId = this.toSaveLocally.projectId;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * called to mirror a response from the server locally\r\n     *\r\n     * @returns {this}\r\n     */\r\n    populateLocalSave() {\r\n        this.toSaveLocally.surveyId = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.surveyId;\r\n        this.toSaveLocally.id = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.surveyId;\r\n        this.toSaveLocally.type = 'survey';\r\n        this.toSaveLocally.attributes = this.returnedToClient.attributes;\r\n        this.toSaveLocally.created = parseInt(this.returnedToClient.created, 10); // stamps from server always take precedence\r\n        this.toSaveLocally.modified = parseInt(this.returnedToClient.modified, 10);\r\n        this.toSaveLocally.saveState = SAVE_STATE_SERVER;\r\n        this.toSaveLocally.deleted = this.returnedToClient.deleted;\r\n        this.toSaveLocally.projectId = parseInt(this.returnedToClient.projectId, 10);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {string}\r\n     */\r\n    localKey() {\r\n        return `survey.${this.toSaveLocally.surveyId}`;\r\n    }\r\n\r\n    static register() {\r\n        ResponseFactory.responses.survey = SurveyResponse;\r\n    }\r\n}\r\n","import {ResponseFactory} from \"./ResponseFactory\";\r\nimport {LocalResponse} from \"./LocalResponse\";\r\nimport {SAVE_STATE_LOCAL, SAVE_STATE_SERVER} from \"../../models/Model\";\r\n\r\nexport class OccurrenceResponse extends LocalResponse {\r\n    failureErrorMessage = 'Failed to store occurrence.';\r\n    failureErrorHelp = 'Your internet connection may have failed (or there could be a problem with the server). ' +\r\n        'It wasn\\'t possible to save a temporary copy on your device. Perhaps there is insufficient space? ' +\r\n        'Please try to re-establish a network connection and try again.';\r\n\r\n    /**\r\n     * called to build the response to the post that is returned to the client\r\n     * in the absence of the remote server\r\n     *\r\n     * @returns {this}\r\n     */\r\n    populateClientResponse() {\r\n        this.returnedToClient.id = this.toSaveLocally.occurrenceId ? this.toSaveLocally.occurrenceId : this.toSaveLocally.id;\r\n        this.returnedToClient.occurrenceId = this.toSaveLocally.occurrenceId ? this.toSaveLocally.occurrenceId : this.toSaveLocally.id;\r\n        this.returnedToClient.type = 'occurrence';\r\n        this.returnedToClient.surveyId = this.toSaveLocally.surveyId;\r\n        this.returnedToClient.attributes = this.toSaveLocally.attributes;\r\n        this.returnedToClient.created = parseInt(this.toSaveLocally.created, 10); // stamps from server always take precedence\r\n        this.returnedToClient.modified = parseInt(this.toSaveLocally.modified, 10);\r\n        this.returnedToClient.saveState = SAVE_STATE_LOCAL;\r\n        this.returnedToClient.deleted = this.toSaveLocally.deleted;\r\n        this.returnedToClient.projectId = parseInt(this.toSaveLocally.projectId, 10);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * called to mirror a response from the server locally\r\n     *\r\n     * @returns {this}\r\n     */\r\n    populateLocalSave() {\r\n        this.toSaveLocally.occurrenceId = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.occurrenceId; // hedging\r\n        this.toSaveLocally.id = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.occurrenceId; // hedging\r\n        this.toSaveLocally.type = 'occurrence';\r\n        this.toSaveLocally.surveyId = this.returnedToClient.surveyId;\r\n        this.toSaveLocally.attributes = this.returnedToClient.attributes;\r\n        this.toSaveLocally.created = parseInt(this.returnedToClient.created, 10); // stamps from server always take precedence\r\n        this.toSaveLocally.modified = parseInt(this.returnedToClient.modified, 10);\r\n        this.toSaveLocally.saveState = SAVE_STATE_SERVER;\r\n        this.toSaveLocally.deleted = (this.returnedToClient.deleted === true || this.returnedToClient.deleted === 'true');\r\n        this.toSaveLocally.projectId = parseInt(this.returnedToClient.projectId, 10);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {string}\r\n     */\r\n    localKey() {\r\n        return `occurrence.${this.toSaveLocally.occurrenceId}`;\r\n    }\r\n\r\n    static register() {\r\n        ResponseFactory.responses.occurrence = OccurrenceResponse;\r\n    }\r\n}\r\n","// service worker for BSBI app\r\n\r\n// based around the 'Cache and update' recipe along with many modifications\r\n// see https://serviceworke.rs\r\n\r\nimport localforage from 'localforage';\r\nimport {ResponseFactory} from \"./responses/ResponseFactory\";\r\nimport {ImageResponse} from \"./responses/ImageResponse\";\r\nimport {packageClientResponse} from \"./packageClientResponse\";\r\nimport {SurveyResponse} from \"./responses/SurveyResponse\";\r\nimport {OccurrenceResponse} from \"./responses/OccurrenceResponse\";\r\nimport {OccurrenceImage} from \"../models/OccurrenceImage\";\r\nimport {Model} from \"../models/Model\";\r\n\r\nexport class BSBIServiceWorker {\r\n\r\n    /**\r\n     * @var {Array.<string>}\r\n     */\r\n    URL_CACHE_SET;\r\n\r\n    /**\r\n     *\r\n     * @param {{\r\n     *  forageName : string,\r\n     *  postPassThroughWhitelist : RegExp,\r\n     *  postImageUrlMatch : RegExp,\r\n     *  getImageUrlMatch : RegExp,\r\n     *  interceptUrlMatches : RegExp,\r\n     *  ignoreUrlMatches : RegExp,\r\n     *  passThroughNoCache : RegExp,\r\n     *  indexUrl : string,\r\n     *  urlCacheSet : Array.<string>,\r\n     *  version : string\r\n     * }} configuration\r\n     */\r\n    initialise(configuration) {\r\n        if (!Promise.prototype.finally) {\r\n            Promise.prototype.finally = function (callback) { // must use 'function' here rather than arrow, due to this binding requirement\r\n                return this.then(callback)\r\n                    .catch(callback);\r\n            };\r\n        }\r\n\r\n        ImageResponse.register();\r\n        SurveyResponse.register();\r\n        OccurrenceResponse.register();\r\n\r\n        this.CACHE_VERSION = `version-BSBI_APP_VERSION-${configuration.version}`;\r\n\r\n        const POST_PASS_THROUGH_WHITELIST = configuration.postPassThroughWhitelist;\r\n        const POST_IMAGE_URL_MATCH = configuration.postImageUrlMatch;\r\n        const GET_IMAGE_URL_MATCH = configuration.getImageUrlMatch;\r\n        const SERVICE_WORKER_INTERCEPT_URL_MATCHES = configuration.interceptUrlMatches;\r\n        const SERVICE_WORKER_IGNORE_URL_MATCHES = configuration.ignoreUrlMatches;\r\n        const SERVICE_WORKER_PASS_THROUGH_NO_CACHE = configuration.passThroughNoCache;\r\n        const INDEX_URL = configuration.indexUrl;\r\n\r\n        this.URL_CACHE_SET = configuration.urlCacheSet;\r\n\r\n        localforage.config({\r\n            name: configuration.forageName\r\n        });\r\n\r\n        // On install, cache some resources.\r\n        self.addEventListener('install', (evt) => {\r\n            console.log('BSBI app service worker is being installed.');\r\n\r\n            // noinspection JSIgnoredPromiseFromCall\r\n            self.skipWaiting();\r\n\r\n            // Ask the service worker to keep installing until the returning promise\r\n            // resolves.\r\n            evt.waitUntil(\r\n                this.precache()\r\n                    // see https://serviceworke.rs/immediate-claim_service-worker_doc.html\r\n                    // .finally(() => {\r\n                    //     console.log(\"Service worker skip waiting after precache.\");\r\n                    //\r\n                    //     return self.skipWaiting();\r\n                    // })\r\n            );\r\n        });\r\n\r\n        self.addEventListener('activate', (event) => {\r\n            console.log({'service worker activate event' : event});\r\n\r\n            event.waitUntil(\r\n                self.clients.matchAll({\r\n                    includeUncontrolled: true\r\n                }).then((clientList) => {\r\n                    const urls = clientList.map((client) => {\r\n                        return client.url;\r\n                    });\r\n                    console.log('[ServiceWorker] Matching clients:', urls.join(', '));\r\n                }).then(() => caches.keys())\r\n                    .then((cacheNames) => {\r\n                        return Promise.all(\r\n                            cacheNames.map((cacheName) => {\r\n                                // test for 'version' prefix to avoid deleting mapbox tiles\r\n                                if (cacheName.startsWith('version') && cacheName !== this.CACHE_VERSION) {\r\n                                    console.log('[ServiceWorker] Deleting old cache:', cacheName);\r\n                                    return caches.delete(cacheName);\r\n                                }\r\n                            })\r\n                        );\r\n                    }).then(() => {\r\n                        console.log('[ServiceWorker] Claiming clients for version', this.CACHE_VERSION);\r\n                        return self.clients.claim();\r\n                    })\r\n                );\r\n            });\r\n\r\n\r\n        // // see https://davidwalsh.name/background-sync\r\n        // // https://developers.google.com/web/updates/2015/12/background-sync\r\n        // self.addEventListener('sync', function(event) {\r\n        //\r\n        // });\r\n\r\n        // On fetch, use cache but update the entry with the latest contents\r\n        // from the server.\r\n        self.addEventListener('fetch', /** @param {FetchEvent} evt */ (evt) => {\r\n            //console.log(`The service worker is serving: '${evt.request.url}'`);\r\n\r\n            evt.preventDefault();\r\n\r\n            if (evt.request.method === 'POST') {\r\n                //console.log(`Got a post request`);\r\n\r\n                //if (evt.request.url.match(POST_PASS_THROUGH_WHITELIST)) {\r\n                if (POST_PASS_THROUGH_WHITELIST.test(evt.request.url)) {\r\n                    console.log(`Passing through whitelisted post request for: ${evt.request.url}`);\r\n                    evt.respondWith(fetch(evt.request));\r\n                } else if (SERVICE_WORKER_PASS_THROUGH_NO_CACHE.test(evt.request.url)) {\r\n                    console.log(`Passing through nocache list post request for: ${evt.request.url}`);\r\n                    evt.respondWith(fetch(evt.request));\r\n                } else {\r\n                    //if (evt.request.url.match(POST_IMAGE_URL_MATCH)) {\r\n                    if (POST_IMAGE_URL_MATCH.test(evt.request.url)) {\r\n                        console.log(`Got an image post request: '${evt.request.url}'`);\r\n                        this.handle_image_post(evt);\r\n                    } else {\r\n                        console.log(`Got post request: '${evt.request.url}'`);\r\n                        this.handle_post(evt);\r\n                    }\r\n                }\r\n            } else {\r\n                // test whether this is a direct link in to a page that should be substituted by\r\n                // the single page app\r\n\r\n                // console.log(`about to test url '${evt.request.url}'`);\r\n\r\n                if (SERVICE_WORKER_INTERCEPT_URL_MATCHES.test(evt.request.url) &&\r\n                    !SERVICE_WORKER_IGNORE_URL_MATCHES.test(evt.request.url)\r\n                ) {\r\n                    // serving single page app instead\r\n                    console.log(`redirecting to the root of the SPA for '${evt.request.url}'`);\r\n                    let spaRequest = new Request(INDEX_URL);\r\n                    evt.respondWith(this.fromCache(spaRequest));\r\n                    evt.waitUntil(this.update(spaRequest));\r\n                } else if (evt.request.url.match(GET_IMAGE_URL_MATCH)) {\r\n                    console.log(`request is for an image '${evt.request.url}'`);\r\n                    this.handleImageFetch(evt);\r\n                } else if (SERVICE_WORKER_PASS_THROUGH_NO_CACHE.test(evt.request.url)) {\r\n                    // typically for external content that can't/shouldn't be cached, e.g. MapBox tiles (which mapbox stores directly in the cache itself)\r\n                    evt.respondWith(fetch(evt.request));\r\n                } else {\r\n                    console.log(`request is for non-image '${evt.request.url}'`);\r\n                    // You can use `respondWith()` to answer immediately, without waiting for the\r\n                    // network response to reach the service worker...\r\n                    evt.respondWith(this.fromCache(evt.request));\r\n                    // ...and `waitUntil()` to prevent the worker from being killed until the\r\n                    // cache is updated.\r\n                    evt.waitUntil(this.update(evt.request));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * used to handle small posts (not images)\r\n     * attempts remote save first then caches locally\r\n     *\r\n     * @param {FetchEvent} evt\r\n     */\r\n    handle_post(evt) {\r\n        let clonedRequest;\r\n        try {\r\n            clonedRequest = evt.request.clone();\r\n        } catch (e) {\r\n            console.log('Failed to clone request.');\r\n            console.log({'Cloning error': e});\r\n        }\r\n\r\n        evt.respondWith(fetch(evt.request)\r\n            .then((response) => {\r\n                // would get here if the server responds at all, but need to check that the response is ok (not a server error)\r\n                if (response.ok) {\r\n                    return Promise.resolve(response)\r\n                        .then((response) => {\r\n                            // save the response locally\r\n                            // before returning it to the client\r\n\r\n                            console.log('About to clone the json response.')\r\n\r\n                            return response.clone().json();\r\n                        })\r\n                        .then((jsonResponseData) => {\r\n                            console.log('Following successful remote post, about to save locally.');\r\n\r\n                            return ResponseFactory\r\n                                .fromPostResponse(jsonResponseData)\r\n                                .setPrebuiltResponse(response)\r\n                                .populateLocalSave()\r\n                                .storeLocally();\r\n                        })\r\n                        .catch((error) => {\r\n                            // for some reason local storage failed, after a successful server save\r\n                            console.log({'local storage failed' : error});\r\n\r\n                            return Promise.resolve(response); // pass through the server response\r\n                        });\r\n                } else {\r\n                    console.log(`Failed to save, moving on to attempt IndexedDb`);\r\n                    return Promise.reject('Failed to save to server.');\r\n                }\r\n            })\r\n            .catch( (reason) => {\r\n                    console.log({'post fetch failed (probably no network)': reason});\r\n\r\n                    // would get here if the network is down\r\n                    // or if got invalid response from the server\r\n\r\n                    console.log(`post fetch failed (probably no network), (reason: ${reason})`);\r\n                    //console.log({'post failure reason' : reason});\r\n\r\n                    // /**\r\n                    //  * simulated result of post, returned as JSON body\r\n                    //  * @type {{surveyId: string, occurrenceId: string, imageId: string, saveState: string, [error]: string, [errorHelp]: string}}\r\n                    //  */\r\n                    // let returnedToClient = {};\r\n\r\n                    return clonedRequest.formData()\r\n                        .then((formData) => {\r\n                                console.log('got to form data handler');\r\n                                //console.log({formData});\r\n\r\n                                return ResponseFactory\r\n                                    .fromPostedData(formData)\r\n                                    .populateClientResponse()\r\n                                    .storeLocally();\r\n                            }, (reason) => {\r\n                                console.log({'failed to read form data locally' : reason});\r\n\r\n                                /**\r\n                                 * simulated result of post, returned as JSON body\r\n                                 * @type {{[surveyId]: string, [occurrenceId]: string, [imageId]: string, [saveState]: string, [error]: string, [errorHelp]: string}}\r\n                                 */\r\n                                let returnedToClient = {\r\n                                    error: 'Failed to process posted response data. (internal error)',\r\n                                    errorHelp: 'Your internet connection may have failed (or there could be a problem with the server). ' +\r\n                                        'It wasn\\'t possible to save a temporary copy on your device. (an unexpected error occurred) ' +\r\n                                        'Please try to re-establish a network connection and try again.'\r\n                                };\r\n\r\n                                return packageClientResponse(returnedToClient);\r\n                            }\r\n                        );\r\n                }\r\n            ));\r\n    }\r\n\r\n    /**\r\n     * used to handle image posts, which need to respond quickly even if the network is slow\r\n     * attempts local cache first then saves out to network\r\n     *\r\n     * @param {FetchEvent} event\r\n     */\r\n    handle_image_post(event) {\r\n        let clonedRequest;\r\n\r\n        console.log('posting image');\r\n\r\n        try {\r\n            clonedRequest = event.request.clone();\r\n        } catch (e) {\r\n            console.log('Failed to clone request.');\r\n            console.log({'Cloning error': e});\r\n        }\r\n\r\n        // send back a quick response to the client from local storage (before the server request completes)\r\n        event.respondWith(\r\n            clonedRequest.formData()\r\n                .then((formData) => {\r\n                        console.log('got to form data handler');\r\n                        //console.log({formData});\r\n\r\n                        return ResponseFactory\r\n                            .fromPostedData(formData)\r\n                            .populateClientResponse()\r\n                            .storeLocally()\r\n                            .then((response) => {\r\n\r\n                                // separately send data to the server, but response goes to client before this completes\r\n                                // am unsure if the return from the wait until part ever reaches the client\r\n                                event.waitUntil(fetch(event.request)\r\n                                    .then((response) => {\r\n                                            console.log('posting image to server in waitUntil part of fetch cycle');\r\n\r\n                                            // would get here if the server responds at all, but need to check that the response is ok (not a server error)\r\n                                            if (response.ok) {\r\n                                                console.log('posted image to server in waitUntil part of fetch cycle: got OK response');\r\n\r\n                                                return Promise.resolve(response)\r\n                                                    .then((response) => {\r\n                                                        // save the response locally\r\n                                                        // before returning it to the client\r\n\r\n                                                        return response.clone().json();\r\n                                                    })\r\n                                                    .then((jsonResponseData) => {\r\n                                                        return ResponseFactory\r\n                                                            .fromPostResponse(jsonResponseData)\r\n                                                            .setPrebuiltResponse(response)\r\n                                                            .populateLocalSave()\r\n                                                            .storeLocally();\r\n                                                    })\r\n                                                    .catch((error) => {\r\n                                                        // for some reason local storage failed, after a successful server save\r\n                                                        console.log({error});\r\n\r\n                                                        return Promise.resolve(response); // pass through the server response\r\n                                                    });\r\n                                            } else {\r\n                                                console.log('posted image to server in waitUntil part of fetch cycle: got Error response');\r\n\r\n                                                /**\r\n                                                 * simulated result of post, returned as JSON body\r\n                                                 * @type {{[surveyId]: string, [occurrenceId]: string, [imageId]: string, [saveState]: string, [error]: string, [errorHelp]: string}}\r\n                                                 */\r\n                                                let returnedToClient = {\r\n                                                    error: 'Failed to save posted response data. (internal error)',\r\n                                                    errorHelp: 'Your internet connection may have failed (or there could be a problem with the server). ' +\r\n                                                        'It wasn\\'t possible to save a temporary copy on your device. (an unexpected error occurred) ' +\r\n                                                        'Please try to re-establish a network connection and try again.'\r\n                                                };\r\n\r\n                                                return packageClientResponse(returnedToClient);\r\n                                            }\r\n                                        }, () => {\r\n                                            console.log('Rejected image post fetch from server - implies network is down')\r\n                                        }\r\n                                    ));\r\n\r\n                                return response;\r\n                            });\r\n                    }, (reason) => {\r\n                        console.log('failed to read form data locally');\r\n                        console.log({reason});\r\n\r\n                        /**\r\n                         * simulated result of post, returned as JSON body\r\n                         * @type {{[surveyId]: string, [occurrenceId]: string, [imageId]: string, [saveState]: string, [error]: string, [errorHelp]: string}}\r\n                         */\r\n                        let returnedToClient = {\r\n                            error: 'Failed to process posted response data. (internal error)',\r\n                            errorHelp: 'Your internet connection may have failed (or there could be a problem with the server). ' +\r\n                                'It wasn\\'t possible to save a temporary copy on your device. (an unexpected error occurred) ' +\r\n                                'Please try to re-establish a network connection and try again.'\r\n                        };\r\n\r\n                        return packageClientResponse(returnedToClient);\r\n                    }\r\n                )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Open a cache and use `addAll()` with an array of assets to add all of them\r\n     * to the cache. Return a promise resolving when all the assets are added.\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    precache() {\r\n        return caches.open(this.CACHE_VERSION).then((cache) => {\r\n            return cache.addAll(this.URL_CACHE_SET);\r\n        }).catch((error) => {\r\n            console.log({'Precache failed result' : error});\r\n            return Promise.resolve();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Open the cache where the assets were stored and search for the requested\r\n     * resource. Notice that in case of no matching, the promise still resolves\r\n     * but it does with `undefined` as value.\r\n     *\r\n     * @param {Request} request\r\n     * @returns {Promise<Response | Promise<Response>>}\r\n     */\r\n    fromCache(request) {\r\n        // @todo need to serve index.html in place of all Navigo-served pages\r\n        // (an issue if someone returns to a bookmarked page within the app)\r\n\r\n        console.log('attempting fromCache response');\r\n\r\n        return caches.open(this.CACHE_VERSION).then((cache) => {\r\n            console.log('cache is open');\r\n\r\n            return cache.match(request).then((matching) => {\r\n                console.log(matching ?\r\n                    `cache matched ${request.url}`\r\n                    :\r\n                    `no cache match for ${request.url}`);\r\n\r\n                //return matching || fetch(request); // return cache match or if not cached then go out to network\r\n                return matching || this.update(request); // return cache match or if not cached then go out to network (and then locally cache the response)\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Special case response for images\r\n     * attempt to serve from local cache first,\r\n     * if that fails then go out to network\r\n     * finally see if there is an image in indexeddb\r\n     *\r\n     * @param {FetchEvent} evt\r\n     */\r\n    handleImageFetch(evt) {\r\n        evt.respondWith(this.fromCache(evt.request).then((response) => {\r\n                console.log('In handleImageFetch promise');\r\n\r\n                // response may be a 404\r\n                if (response && response.ok) {\r\n                    console.log('Responding with image from cache (or remotely if no cache).');\r\n                    return response;\r\n                } else {\r\n                    // not cached and no network access\r\n                    // try to respond from local storage\r\n\r\n                    const url = evt.request.url;\r\n                    console.log(`Attempting image match for '${url}'`);\r\n\r\n                    const matches = url.match(/imageid=([a-fA-F0-9]{8}-(?:[a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12})/);\r\n\r\n                    if (matches) {\r\n                        const imageId = matches[1];\r\n                        console.log(`Returning image match for '${url}' from local database`);\r\n                        return this.imageFromLocalDatabase(imageId);\r\n                    } else {\r\n                        console.log(`Failed to match image id in url '${url}'`);\r\n                    }\r\n                }\r\n            })\r\n                .catch((error) => {\r\n                    const url = evt.request.url;\r\n                    console.log({'caught' : error});\r\n                    console.log(`In catch following failed network fetch, attempting image match for '${url}'`);\r\n\r\n                    const matches = url.match(/imageid=([a-fA-F0-9]{8}-(?:[a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12})/);\r\n\r\n                    if (matches) {\r\n                        const imageId = matches[1];\r\n                        console.log(`(via catch) Returning image match for '${url}' from local database`);\r\n                        return this.imageFromLocalDatabase(imageId);\r\n                    } else {\r\n                        console.log(`(via catch) Failed to match image id in url '${url}'`);\r\n                        return Promise.reject(null);\r\n                    }\r\n                })\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} imageId\r\n     * @returns {Promise}\r\n     */\r\n    imageFromLocalDatabase(imageId) {\r\n        const image = new OccurrenceImage();\r\n\r\n        console.log('attempting retrieval of image data from local database');\r\n\r\n        return Model.retrieveFromLocal(imageId, image).then((image) => {\r\n            console.log(`Retrieved image '${imageId}' from indexeddb.`);\r\n            if (image.file) {\r\n                const headers = new Headers();\r\n                headers.append('Content-Type', image.file.type);\r\n\r\n                return new Response(image.file, {\r\n                    \"status\": 200,\r\n                    \"statusText\": \"OK image response from IndexedDb\"\r\n                });\r\n            } else {\r\n                console.log(`No local file object associated with retrieved image '${imageId}' from indexeddb.`);\r\n                return Promise.reject(`No local file object associated with retrieved image '${imageId}' from indexeddb.`);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update consists in opening the cache, performing a network request and\r\n     * storing the new response data.\r\n     *\r\n     * @param {Request} request\r\n     * @returns {Promise<Response>}\r\n     */\r\n    update(request) {\r\n        request = new Request(request, {mode: 'cors', credentials: 'omit'});\r\n\r\n        console.log(`Attempting fetch and cache update of ${request.url}`);\r\n\r\n        return caches.open(this.CACHE_VERSION).then((cache) => {\r\n            return fetch(request, {cache: \"no-cache\"}).then((response) => {\r\n                if (response.ok) {\r\n                    console.log(`(re-)caching ${request.url}`);\r\n                    return cache.put(request, response).then(() => {\r\n                        return cache.match(request);\r\n                    });\r\n                } else {\r\n                    console.log(`Request during cache update failed for ${request.url}`);\r\n                    console.log({'failed cache response': response});\r\n                    return Promise.reject('Request during cache update failed, not caching.');\r\n                }\r\n            }).catch((error) => {\r\n                console.log(`Cache attempt failed for ${request.url}: error was ${error}`);\r\n                return Promise.reject(`Cache attempt failed for ${request.url}: error was ${error}`);\r\n            });\r\n        });\r\n    }\r\n}\r\n","/** ****************************************************************************\r\n * Generates species list suggestions.\r\n *****************************************************************************/\r\n\r\nimport {Taxon} from '../../models/Taxon';\r\n\r\n/**\r\n * @external BsbiDb\r\n */\r\n\r\nexport class TaxonSearch {\r\n\r\n    /**\r\n     * see TaxonRank::sort\r\n     *\r\n     * @type int|null\r\n     */\r\n    minimumRankSort = null;\r\n\r\n    /**\r\n     * if set then only taxa with records are returned\r\n     *\r\n     * @type boolean\r\n     */\r\n    requireExtantDDbRecords = false;\r\n\r\n    // /**\r\n    //  * if set then only taxa with records present in the specified status scheme (scheme id code)\r\n    //  * (default null)\r\n    //  *\r\n    //  * @type string|null\r\n    //  */\r\n    // requiredStatusSchemeId = null;\r\n\r\n    /**\r\n     * if set then require that returned taxon names are >= 3 letters\r\n     * and don't contain numerals\r\n     *\r\n     * @type boolean\r\n     */\r\n    skipJunk = true;\r\n\r\n    /**\r\n     * (static config setting)\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    static showVernacular = true;\r\n\r\n    static MIN_SEARCH_LENGTH = 2;\r\n\r\n    static MAXIMUM_RESULTS = 25;\r\n\r\n    constructor() {\r\n        if (!Taxon.rawTaxa) {\r\n            Taxon.rawTaxa = BsbiDb.TaxonNames;\r\n\r\n            if (!Taxon.rawTaxa) {\r\n                throw new Error('Taxon list has failed to load in TaxonSearch');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} taxonResult\r\n     * @param {string} queryString\r\n     * @returns {string}\r\n     */\r\n    static formatter(taxonResult, queryString = '') {\r\n        if (TaxonSearch.showVernacular) {\r\n            if (taxonResult.vernacularMatched) {\r\n                if (taxonResult.acceptedEntityId) {\r\n                    return `<q><b>${taxonResult.vernacular}</b></q> <span class=\"italictaxon\">${taxonResult.uname}${taxonResult.qualifier ? ` <b>${taxonResult.qualifier}</b>` : ''}</span> <span class=\"taxauthority\">${taxonResult.authority}</span>` +\r\n                        ` = <span class=\"italictaxon\">${taxonResult.acceptedNameString}${taxonResult.acceptedQualifier ? ` <b>${taxonResult.acceptedQualifier}</b>` : ''}</span> <span class=\"taxauthority\">${taxonResult.acceptedAuthority}</span>`;\r\n                }\r\n                return `<q><b>${taxonResult.vernacular}</b></q> <span class=\"italictaxon\">${taxonResult.uname}${taxonResult.qualifier ? ` <b>${taxonResult.qualifier}</b>` : ''}</span> <span class=\"taxauthority\">${taxonResult.authority}</span>`;\r\n            }\r\n            if (taxonResult.acceptedEntityId) {\r\n                return `<span class=\"italictaxon\">${taxonResult.uname}${taxonResult.qualifier ? ` <b>${taxonResult.qualifier}</b>` : ''}</span> <span class=\"taxauthority\">${taxonResult.authority}</span>${taxonResult.vernacular ? ` <q><b>${taxonResult.vernacular}</b></q>` : ''\r\n                    } = <span class=\"italictaxon\">${taxonResult.acceptedNameString}${taxonResult.acceptedQualifier ? ` <b>${taxonResult.acceptedQualifier}</b>` : ''}</span> <span class=\"taxauthority\">${taxonResult.acceptedAuthority}</span>`;\r\n            }\r\n            return `<span class=\"italictaxon\">${taxonResult.uname}${taxonResult.qualifier ? ` <b>${taxonResult.qualifier}</b>` : ''}</span> <span class=\"taxauthority\">${taxonResult.authority}</span>${taxonResult.vernacular ? ` <q><b>${taxonResult.vernacular}</b></q>` : ''}`;\r\n        }\r\n        if (taxonResult.acceptedEntityId) {\r\n            return `<span class=\"italictaxon\">${taxonResult.uname}${taxonResult.qualifier ? ` <b>${taxonResult.qualifier}</b>` : ''}</span> <span class=\"taxauthority\">${taxonResult.authority}</span>` +\r\n                ` = <span class=\"italictaxon\">${taxonResult.acceptedNameString}${taxonResult.acceptedQualifier ? ` <b>${taxonResult.acceptedQualifier}</b>` : ''}</span> <span class=\"taxauthority\">${taxonResult.acceptedAuthority}</span>`;\r\n        }\r\n        return `<span class=\"italictaxon\">${taxonResult.uname}${taxonResult.qualifier ? ` <b>${taxonResult.qualifier}</b>` : ''}</span> <span class=\"taxauthority\">${taxonResult.authority}</span>`;\r\n    }\r\n\r\n    static abbreviatedGenusRegex = /^(X\\s+)?([a-z])[.\\s]+(.*?)$/i;\r\n\r\n    static nameStringColumn = 0;\r\n    static canonicalColumn = 1;\r\n    static hybridCanonicalColumn = 2;\r\n    static acceptedEntityIdColumn = 3;\r\n    static qualifierColumn = 4;\r\n    static authorityColumn = 5;\r\n    static vernacularColumn = 6;\r\n    static vernacularRootColumn = 7;\r\n    static usedColumn = 8;\r\n    static minRankColumn = 9;\r\n\r\n    static taxonRankNameSearchRegex = [\r\n        /\\s+sub-?g(?:en(?:us)?)?[.\\s]+/i,\r\n        /\\s+sect(?:ion)?[.\\s]+/i,\r\n        /\\s+subsect(?:ion)?[.\\s]+/i,\r\n        /\\s+ser(?:ies)?[.\\s]+/i,\r\n        /\\s+gp[.\\s]+/i,\r\n        /\\s+s(?:ub)?-?sp(?:ecies)?[.\\s]+/i,\r\n        /\\s+morphotype\\s+/i,\r\n        /\\s+var[.\\s]+/i,\r\n        /\\s+cv[.\\s]+/i,\r\n        /\\s+n(?:otho)?v(?:ar)?[.\\s]+/i,\r\n        /\\s+f[.\\s]+|\\s+forma?\\s+/i,\r\n        /\\s+n(?:otho)?ssp[.\\s]+/i,\r\n    ];\r\n\r\n    static taxonRankNameReplacement = [\r\n        ' subg. ',\r\n        ' sect. ',\r\n        ' subsect. ',\r\n        ' ser. ',\r\n        ' group ',\r\n        ' subsp. ',\r\n        ' morph. ',\r\n        ' var. ',\r\n        ' cv. ', // ddb preference is for single quotes for cultivars\r\n        ' nothovar. ',\r\n        ' f. ',\r\n        ' nothosubsp. ',\r\n    ];\r\n\r\n    /**\r\n     * well-formed ranks, used for stripping rank from name for results table sorting\r\n     *\r\n     * @type RegExp\r\n     */\r\n    static cleanRankNamesRegex = /\\s(subfam\\.|subg\\.|sect\\.|subsect\\.|ser\\.|subser\\.|subsp\\.|nothosubsp\\.|microsp\\.|praesp\\.|agsp\\.|race|convar\\.|nm\\.|microgene|f\\.|subvar\\.|var\\.|nothovar\\.|cv\\.|sublusus|taxon|morph\\.|group|sp\\.)\\s/;\r\n\r\n    /**\r\n     *\r\n     * @type Array *DON'T COPY THESE YET, AS THEY ARE AN UNOPTIMIZED MESS!*\r\n     */\r\n    static taxonQualifierSearchRegex = [\r\n        /\\s*\\(?\\bf\\s*x\\s*m or m\\s*x\\s*f\\)?\\s*$/i,\r\n        /\\s*\\(?\\bm\\s*x\\s*f or f\\s*x\\s*m\\)?\\s*$/i,\r\n\r\n        /\\s*\\(?\\bf\\s*x\\s*m\\)?\\s*$/i,\r\n        /\\s*\\(?\\bm\\s*x\\s*f\\)?\\s*$/i,\r\n\r\n        /\\s*\\(?\\bfemale\\s*x\\s*male\\)?\\s*$/i,\r\n        /\\s*\\(?\\bmale\\s*x\\s*female\\)?\\s*$/i,\r\n\r\n        // stand-alone male/female qualifier (e.g. applied to Petasites hybridus)\r\n        // removes single quotes\r\n        /\\s*'male'\\s*$/i,\r\n        /\\s*'female'\\s*$/i,\r\n\r\n        // mid-string ss/sl qualifiers\r\n        /\\b\\s*sens\\.?\\s*lat[.\\s]+/i,\r\n        /\\b\\s*s\\.\\s*lat\\.?\\s*\\b/i,\r\n        /\\b\\s*s\\.?\\s*l\\.?\\s+\\b/i,\r\n        /\\b\\s*sensu\\s*lato\\s+\\b|\\(\\s*sensu\\s*lato\\s*\\)/i,\r\n\r\n        /\\b\\s*sensu\\s*stricto\\s+\\b|\\(\\s*sensu\\s*stricto\\s*\\)/i,\r\n        /\\b\\s*sens\\.?\\s*strict[.\\s]+/i,\r\n\r\n        // '/\\b\\s*sens\\.?\\s*str\\.?\\s*(?=\\))|\\b\\s*sens\\.?\\s*str\\.?\\s*\\b/i', // the first look-ahead option matches before a closing-paren (\\b fails between '.)' )\r\n        /\\b\\s*sens\\.?\\s*str\\.?\\s*(?=\\))|\\b\\s*sens\\.?\\s*str[.\\s]+/i,\r\n        // '/\\b\\s*s\\.\\s*str\\.?\\s*\\b/i',\r\n        /\\b\\s*s\\.\\s*str[.\\s]+/i,\r\n        /\\b\\s*s\\.?\\s*s\\.?\\s+\\b/i,\r\n\r\n        // end-of-string ss/sl qualifiers\r\n        /\\b\\s*sens\\.?\\s*lat\\.?\\s*$/i,\r\n        /\\b\\s*s\\.\\s*lat\\.?\\s*$/i,\r\n        /\\b\\s*s\\.?\\s*l\\.?\\s*$/i,\r\n        /\\b\\s*sensu\\s*lato\\s*$/i,\r\n\r\n        /\\b\\s*sensu\\s*stricto\\s*$/i,\r\n        /\\b\\s*sens\\.?\\s*strict\\.?\\s*$/i,\r\n        /\\b\\s*sens\\.?\\s*str\\.?\\s*$/i,\r\n        /\\b\\s*s\\.\\s*str\\.?\\s*$/i,\r\n        /\\b\\s*s\\.?\\s*s\\.?\\s*$/i,\r\n\r\n        /\\b\\s*agg\\.?\\s*$/i,\r\n        /\\b\\s*aggregate\\s*$/i,\r\n\r\n        /\\b\\s*sp\\.?\\s*cultivar\\s*$/i,\r\n        /\\b\\s*sp\\.?\\s*cv\\.?\\s*$/i,\r\n        /\\b\\s*cultivars?\\s*$/i,\r\n        /\\b\\s*cv\\s+$/i,\r\n        /\\b\\s*cv$/i,\r\n\r\n        /\\b\\s*cf\\s*$/i,\r\n        /\\b\\s*aff\\s*$/i,\r\n        /\\b\\s*s\\.?n\\.?\\s*$/i,\r\n        /\\b\\s*sp\\.?\\s*nov\\.?\\s*$/i,\r\n\r\n        /\\b\\s*auct[.\\s]*$/i,\r\n\r\n        /\\b\\s*ined[.\\s]*$/i,\r\n\r\n        /\\b\\s*nom\\.?\\snud[.\\s]*$/i,\r\n\r\n        /\\b\\s*p\\.p[.\\s?]*$/i,\r\n\r\n        /\\b\\s*spp?\\.?[\\s?]*$/i,\r\n        /\\b\\s*species\\s*$/i,\r\n        /\\b\\s*spp?\\.?\\s*\\(/i, // catch e.g. Ulmus sp. (excluding Ulmus glabra)\r\n        /\\b\\s*species\\s*\\(/i,\r\n    ];\r\n\r\n    static taxonQualifierReplacement = [\r\n        ' ', // (f x m or m x f) is the default so an explicit qualifier isn't used\r\n        ' ', // (m x f or f x m) is the default so an explicit qualifier isn't used\r\n\r\n        ' (f x m)',\r\n        ' (m x f)',\r\n\r\n        ' (f x m)',\r\n        ' (m x f)',\r\n\r\n        // stand-alone male/female qualifier (e.g. applied to Petasites hybridus)\r\n        // removed single quotes\r\n        ' male',\r\n        ' female',\r\n\r\n        // mid-string ss/sl qualifiers\r\n        ' s.l. ',\r\n        ' s.l. ',\r\n        ' s.l. ',\r\n        ' s.l. ',\r\n\r\n        ' s.s. ',\r\n        ' s.s. ',\r\n        ' s.s. ',\r\n        ' s.s. ',\r\n        ' s.s. ',\r\n\r\n        // end-of-string ss/sl qualifiers\r\n        ' s.l.',\r\n        ' s.l.',\r\n        ' s.l.',\r\n        ' s.l.',\r\n\r\n        ' s.s.',\r\n        ' s.s.',\r\n        ' s.s.',\r\n        ' s.s.',\r\n        ' s.s.',\r\n\r\n        ' agg.',\r\n        ' agg.',\r\n\r\n        ' cv. ',\r\n        ' cv. ',\r\n        ' cv. ',\r\n        ' cv. ',\r\n        ' cv. ',\r\n\r\n        ' cf.',\r\n        ' aff.',\r\n\r\n        ' sp.nov.',\r\n        ' sp.nov.',\r\n\r\n        ' auct.',\r\n\r\n        ' ined.',\r\n\r\n        ' nom. nud.',\r\n\r\n        ' pro parte',\r\n\r\n        '',\r\n        '',\r\n        ' (',\r\n        ' (',\r\n    ];\r\n\r\n    /**\r\n     *\r\n     * @param {string} taxonString\r\n     * @returns {string}\r\n     */\r\n    static normaliseTaxonName(taxonString) {\r\n        for (let i = 0, l = TaxonSearch.taxonRankNameSearchRegex.length; i < l; i++) {\r\n            taxonString = taxonString.replace(TaxonSearch.taxonRankNameSearchRegex[i], TaxonSearch.taxonRankNameReplacement[i]);\r\n        }\r\n\r\n        for (let i = 0, l = TaxonSearch.taxonQualifierSearchRegex.length; i < l; i++) {\r\n            taxonString = taxonString.replace(TaxonSearch.taxonQualifierSearchRegex[i], TaxonSearch.taxonQualifierReplacement[i]);\r\n        }\r\n\r\n        return taxonString;\r\n    }\r\n\r\n    /**\r\n     * from https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions\r\n     *\r\n     * @param {string} literal\r\n     * @return string\r\n     */\r\n    static escapeRegExp(literal) {\r\n        return literal.replace(TaxonSearch.cleanRegex, '\\\\$&');\r\n    };\r\n\r\n    static cleanRegex = /[.*+?^${}()|[\\]\\\\]/g;\r\n\r\n    /**\r\n     * generate hybrid name permutations\r\n     *\r\n     * @param {string} names unescaped series of species e.g. \"glandulifera\" or \"carex x nigra\"\r\n     * @returns {string} name permutations formatted as a regular expression\r\n     */\r\n    static generate_hybrid_combinations_regex(names) {\r\n        const splitParts = TaxonSearch.escapeRegExp(names).split(/\\s+x\\s+/i);\r\n        if (splitParts.length < 2) {\r\n            return splitParts[0];\r\n        }\r\n\r\n        const hybridPermutations = [];\r\n\r\n        /**\r\n         * generate hybrid name permutations\r\n         *\r\n         * modified from O'Reilly PHP Cookbook\r\n         * http://docstore.mik.ua/orelly/webprog/pcook/ch04_26.htm\r\n         *\r\n         * @param {Array.<string>} items\r\n         * @param {Array.<string>} perms\r\n         */\r\n        const permutate = function (items, perms) {\r\n            if (items.length === 0) {\r\n                hybridPermutations[hybridPermutations.length] = perms.join('[a-zA-Z]* x ');\r\n            } else {\r\n                for (let i = items.length - 1; i >= 0; --i) {\r\n                    const newItems = items.slice(0);\r\n                    const newPerms = perms.slice(0); // take copies of the array\r\n\r\n                    newPerms.unshift(newItems.splice(i, 1)[0]);\r\n                    permutate(newItems, newPerms);\r\n                }\r\n            }\r\n        };\r\n\r\n        permutate(splitParts, []);\r\n\r\n        return `(?:${hybridPermutations.join('|')})`;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} query\r\n     * @returns {Array.<{entityId: string,\r\n                        vernacular: string,\r\n                        qname: string,\r\n                        name: string,\r\n                        qualifier: string,\r\n                        authority: string,\r\n                        uname: string,\r\n                        vernacularMatched: boolean,\r\n                        exact: boolean,\r\n                        near: boolean,\r\n                        formatted: string,\r\n                        acceptedEntityId: string,\r\n                        acceptedNameString: string,\r\n                        acceptedQualifier: string,\r\n                        acceptedAuthority: string\r\n                        }>}\r\n     */\r\n    lookup(query) {\r\n        let results,\r\n            taxonString,\r\n            canonical,\r\n            matchedIds = {},\r\n            preferHybrids\r\n            ;\r\n\r\n        // ignore trailing ' x' from string which would just muck up result matching\r\n        taxonString = TaxonSearch.normaliseTaxonName(decodeURIComponent(query).trim()).replace(/\\s+x$/i, '');\r\n        preferHybrids = / x\\b/.test(taxonString);\r\n\r\n        if (taxonString !== '') {\r\n            const abbreviatedMatches = taxonString.match(TaxonSearch.abbreviatedGenusRegex);\r\n            if (abbreviatedMatches) {\r\n                // matched an abbreviated genus name (or an abbreviated hybrid genus)\r\n\r\n                let exp,\r\n                    nearMatchExp;\r\n                if (abbreviatedMatches[2] === 'X' || abbreviatedMatches[2] === 'x') {\r\n                    // either have a genus name beginning 'X' or a hybrid genus\r\n\r\n                    exp = new RegExp(`^(X\\\\s|X[a-z]+\\\\s+)(x )?\\\\b${TaxonSearch.generate_hybrid_combinations_regex(abbreviatedMatches[3])}.*`, 'i');\r\n                    nearMatchExp = exp;\r\n                } else {\r\n                    exp = new RegExp(`^(X )?${TaxonSearch.escapeRegExp(abbreviatedMatches[2])}[a-z]+ (x )?.*\\\\b${TaxonSearch.generate_hybrid_combinations_regex(abbreviatedMatches[3])}.*`, 'i');\r\n\r\n                    /**\r\n                     * Similar to exp but without flexibility (.*) after genus part\r\n                     * used only for result ranking (exact>near>vague)\r\n                     */\r\n                    nearMatchExp = new RegExp(`^(X )?${TaxonSearch.escapeRegExp(abbreviatedMatches[2])}[a-z]+ (x )?\\\\b${TaxonSearch.generate_hybrid_combinations_regex(abbreviatedMatches[3])}.*`, 'i');\r\n                }\r\n\r\n                for (let id in Taxon.rawTaxa) {\r\n                    // noinspection JSUnfilteredForInLoop (assume is safe for rawTaxa object)\r\n                    let testTaxon = Taxon.rawTaxa[id];\r\n\r\n                    /**\r\n                     * The canonical name may be identical to the nameString in which case JSON taxon list stores\r\n                     * zero instead to save file space (and to mark that canonical name should be ignored)\r\n                     */\r\n                    canonical = testTaxon[TaxonSearch.canonicalColumn] === 0 ?\r\n                        testTaxon[TaxonSearch.nameStringColumn]\r\n                        :\r\n                        testTaxon[TaxonSearch.canonicalColumn];\r\n\r\n                    if (exp.test(canonical) ||\r\n                        ((testTaxon[TaxonSearch.hybridCanonicalColumn] !== '') && exp.test(testTaxon[TaxonSearch.hybridCanonicalColumn]))\r\n                    ) {\r\n                        matchedIds[id] = {\r\n                            exact: (testTaxon[TaxonSearch.nameStringColumn] === taxonString),\r\n                            near: (nearMatchExp.test(testTaxon[TaxonSearch.nameStringColumn])),\r\n                        };\r\n                    }\r\n                }\r\n\r\n                results = this.compile_results(matchedIds, preferHybrids);\r\n            } else {\r\n                // genus is not abbreviated\r\n\r\n                let canonicalQuery,\r\n                    nearMatchRegex;\r\n                const escapedTaxonString = TaxonSearch.escapeRegExp(taxonString);\r\n\r\n                if (taxonString.indexOf(' ') !== -1) {\r\n                    // hybrids of the form Species x nothoname or Species nothoname should be seen as equivalent\r\n\r\n                    canonicalQuery = `${TaxonSearch.escapeRegExp(taxonString.substring(0, taxonString.indexOf(' ')))\r\n                        } (x )?.*\\\\b${TaxonSearch.generate_hybrid_combinations_regex(taxonString.substring(taxonString.indexOf(' ') + 1))}.*`;\r\n\r\n                    /**\r\n                     * Similar to canonicalQuery/hybridCanonicalQuery but without flexibility (.*) after genus part\r\n                     * used only for result ranking (exact>near>vague)\r\n                     */\r\n                    nearMatchRegex = new RegExp(`^(?:X\\s+)?${TaxonSearch.escapeRegExp(taxonString.substring(0, taxonString.indexOf(' ')))\r\n                        } (x )?\\\\b${TaxonSearch.generate_hybrid_combinations_regex(taxonString.substring(taxonString.indexOf(' ') + 1))}.*`, 'i');\r\n                } else {\r\n                    canonicalQuery = `${escapedTaxonString}.*`;\r\n                    nearMatchRegex = new RegExp(`^${escapedTaxonString}.*`);\r\n                }\r\n\r\n                const strictEscapedTaxonString = `^${escapedTaxonString}.*`;\r\n                // var escapedTaxonStringRegExp = new RegExp(strictEscapedTaxonString, 'i');\r\n                // var canonicalQueryRegExp = new RegExp('^' + canonicalQuery, 'i');\r\n                // var hybridCanonicalQueryregExp = new RegExp('^X ' + canonicalQuery, 'i');\r\n                const canonicalQueryRegExp = new RegExp(`^(?:X\\s+)?${canonicalQuery}`, 'i');\r\n\r\n                if (!TaxonSearch.showVernacular) {\r\n                    // no vernacular\r\n\r\n                    for (let id in Taxon.rawTaxa) {\r\n                        // noinspection JSUnfilteredForInLoop (assume is safe for rawTaxa object)\r\n                        let testTaxon = Taxon.rawTaxa[id];\r\n\r\n                        canonical = testTaxon[TaxonSearch.canonicalColumn] === 0 ?\r\n                            testTaxon[TaxonSearch.nameStringColumn]\r\n                            :\r\n                            testTaxon[TaxonSearch.canonicalColumn];\r\n\r\n                        if (\r\n                            // testTaxon[TaxonSearch.nameStringColumn].search(escapedTaxonStringRegExp) !== -1 ||\r\n                            canonicalQueryRegExp.test(testTaxon[TaxonSearch.nameStringColumn]) ||\r\n                            ((canonical !== testTaxon[TaxonSearch.nameStringColumn]) && canonicalQueryRegExp.test(canonical))\r\n                        // testTaxon[TaxonSearch.nameStringColumn].search(hybridCanonicalQueryregExp) !== -1\r\n                        ) {\r\n                            matchedIds[id] =\r\n                                {exact: (testTaxon[TaxonSearch.nameStringColumn] === taxonString)};\r\n                        }\r\n                    }\r\n\r\n                    results = this.compile_results(matchedIds, preferHybrids);\r\n                } else {\r\n                    const caseInsensitiveEscapedTaxonRegex = new RegExp(strictEscapedTaxonString, 'i');\r\n\r\n                    for (let id in Taxon.rawTaxa) {\r\n                        // noinspection JSUnfilteredForInLoop (assume is safe for rawTaxa object)\r\n                        let testTaxon = Taxon.rawTaxa[id];\r\n\r\n                        canonical = testTaxon[TaxonSearch.canonicalColumn] === 0 ?\r\n                            testTaxon[TaxonSearch.nameStringColumn]\r\n                            :\r\n                            testTaxon[TaxonSearch.canonicalColumn];\r\n\r\n                        if (\r\n                            // testTaxon[TaxonSearch.nameStringColumn].search(escapedTaxonStringRegExp) !== -1 ||\r\n                            canonicalQueryRegExp.test(testTaxon[TaxonSearch.nameStringColumn]) ||\r\n                            ((canonical !== testTaxon[TaxonSearch.nameStringColumn]) && canonicalQueryRegExp.test(canonical))\r\n                        // testTaxon[TaxonSearch.nameStringColumn].search(hybridCanonicalQueryregExp) !== -1\r\n                        ) {\r\n                            matchedIds[id] = {\r\n                                exact: (testTaxon[TaxonSearch.nameStringColumn] === taxonString),\r\n                                near: (nearMatchRegex.test(testTaxon[TaxonSearch.nameStringColumn]) ||\r\n                                    nearMatchRegex.test(canonical)),\r\n                            };\r\n                        } else if (\r\n                            caseInsensitiveEscapedTaxonRegex.test(testTaxon[TaxonSearch.vernacularColumn]) ||\r\n                            caseInsensitiveEscapedTaxonRegex.test(testTaxon[TaxonSearch.vernacularRootColumn])\r\n                        ) {\r\n                            matchedIds[id] = {\r\n                                exact: (testTaxon[TaxonSearch.vernacularColumn] === taxonString),\r\n                                vernacular: true,\r\n                            };\r\n                        }\r\n                    }\r\n\r\n                    results = this.compile_results(matchedIds, preferHybrids);\r\n\r\n                    /**\r\n                     * if very few matches then retry searching using much fuzzier matching\r\n                     */\r\n                    if (results.length < 5) {\r\n                        const broadRegExp = new RegExp(`\\\\b${escapedTaxonString}.*`, 'i'); // match anywhere in string\r\n\r\n                        for (let id in Taxon.rawTaxa) {\r\n                            // noinspection JSUnfilteredForInLoop (assume is safe for rawTaxa object)\r\n                            if (!matchedIds.hasOwnProperty(id)) {\r\n                                let testTaxon = Taxon.rawTaxa[id];\r\n\r\n                                if (broadRegExp.test(testTaxon[TaxonSearch.nameStringColumn])) {\r\n                                    matchedIds[id] =\r\n                                        {exact: (testTaxon[TaxonSearch.nameStringColumn] === taxonString)};\r\n                                } else if (\r\n                                    (testTaxon[TaxonSearch.canonicalColumn] !== 0 && broadRegExp.test(testTaxon[TaxonSearch.canonicalColumn])) ||\r\n                                    broadRegExp.test(testTaxon[TaxonSearch.vernacularColumn])\r\n                                ) {\r\n                                    matchedIds[id] = {\r\n                                        exact: (testTaxon[TaxonSearch.nameStringColumn] === taxonString),\r\n                                        vernacular: true\r\n                                    };\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        results = this.compile_results(matchedIds, preferHybrids);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            results = [];\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    compile_results(matchedIds, preferHybrids) {\r\n        const results = [];\r\n\r\n        for (const id in matchedIds) {\r\n            if (matchedIds.hasOwnProperty(id)) {\r\n                const taxon = Taxon.rawTaxa[id];\r\n\r\n                if (\r\n                    (!this.requireExtantDDbRecords || (this.requireExtantDDbRecords && taxon[TaxonSearch.usedColumn] === 1)) &&\r\n                    (!this.minimumRankSort || (this.minimumRankSort > 0 && taxon[TaxonSearch.minRankColumn] >= this.minimumRankSort))\r\n                ) {\r\n                    const qname = taxon[TaxonSearch.nameStringColumn] + (taxon[TaxonSearch.qualifierColumn] ? (` ${taxon[TaxonSearch.qualifierColumn]}`) : '');\r\n\r\n                    const row = {\r\n                        entityId: id,\r\n                        vernacular: taxon[TaxonSearch.vernacularColumn],\r\n                        qname,\r\n                        name: qname, // use qualified name for the generic name field\r\n                        qualifier: taxon[TaxonSearch.qualifierColumn],\r\n                        authority: taxon[TaxonSearch.authorityColumn],\r\n                        uname: taxon[TaxonSearch.nameStringColumn],\r\n                        vernacularMatched: matchedIds[id].hasOwnProperty('vernacular'),\r\n                        exact: matchedIds[id].hasOwnProperty('exact') && matchedIds[id].exact,\r\n                        near: matchedIds[id].hasOwnProperty('near') && matchedIds[id].near,\r\n                    };\r\n\r\n                    row.formatted = TaxonSearch.formatter(row);\r\n\r\n                    if (taxon[TaxonSearch.acceptedEntityIdColumn]) {\r\n                        const acceptedTaxon = Taxon.rawTaxa[taxon[TaxonSearch.acceptedEntityIdColumn]];\r\n\r\n                        if (!acceptedTaxon) {\r\n                            if (!Taxon.rawTaxa) {\r\n                                throw new Error(`Taxon.rawTaxa set is undefined, when trying to find taxon for accepted entity id ${taxon[TaxonSearch.acceptedEntityIdColumn]}`);\r\n                            } else {\r\n                                throw new Error(`Failed to find taxon for accepted entity id ${taxon[TaxonSearch.acceptedEntityIdColumn]}`);\r\n                            }\r\n                        }\r\n\r\n                        row.acceptedEntityId = taxon[TaxonSearch.acceptedEntityIdColumn];\r\n                        row.acceptedNameString = acceptedTaxon[TaxonSearch.nameStringColumn];\r\n                        row.acceptedQualifier = acceptedTaxon[TaxonSearch.qualifierColumn];\r\n                        row.acceptedAuthority = acceptedTaxon[TaxonSearch.authorityColumn];\r\n                    }\r\n\r\n                    results.push(row);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (results.length) {\r\n            results.sort((a, b) => {\r\n                // if (a.uname == 'Taraxacum \\'Irish cambricum\\'' || b.uname == 'Taraxacum \\'Irish cambricum\\'') {\r\n                //   console.log(a.uname + \" with \" + b.uname);\r\n                // }\r\n\r\n                if (a.exact) {\r\n                    // logger('exact test a: ' + a.uname + ' vs ' + b.uname);\r\n                    // logger(b);\r\n                    if (b.exact) {\r\n                        return a.acceptedEntityId ? 1 : 0; // prefer accepted name\r\n                    }\r\n                    return -1;\r\n\r\n                    // return b.exact ? 0 : -1;\r\n                } else if (b.exact) {\r\n                    // logger('exact test b: ' + b.uname);\r\n                    return 1;\r\n                }\r\n\r\n                if (a.near) {\r\n                    if (!b.near) {\r\n                        return -1;\r\n                    }\r\n                } else if (b.near) {\r\n                    // logger('exact test b: ' + b.uname);\r\n                    return 1;\r\n                }\r\n\r\n                let aIsHybrid = a.uname.match(/\\bx\\b/i) !== null;\r\n                let bIsHybrid = b.uname.match(/\\bx\\b/i) !== null;\r\n\r\n                if (aIsHybrid) {\r\n                    // logger('hybrid test: ' + a.qname + ' vs ' + b.qname);\r\n                    // logger('hybrid test: ' + a.uname + ' vs ' + b.uname);\r\n                    if (bIsHybrid) {\r\n                        if (a.uname === b.uname) {\r\n                            return a.acceptedEntityId ? 1 : 0; // prefer accepted name\r\n                        }\r\n                        return a.qname < b.qname ? -1 : 1;\r\n                    }\r\n                    return preferHybrids ? -1 : 1;\r\n                } else if (bIsHybrid) {\r\n                    return preferHybrids ? 1 : -1;\r\n                } else if (a.uname === b.uname) {\r\n                    if ((a.acceptedEntityId || b.acceptedEntityId) &&\r\n                        !(a.acceptedEntityId && b.acceptedEntityId)) {\r\n                        // one of the pair is not an accepted name\r\n\r\n                        return a.acceptedEntityId ? 1 : -1; // prefer accepted name\r\n                    } else {\r\n                        // for NYPH purposes agg. and s.l. should be prioritised over\r\n                        // agg., s.l., empty, s.s.\r\n\r\n                        let aQIndex = ['s.s.', '', null, 's.l.', 'agg.'].indexOf(a.qualifier);\r\n                        let bQIndex = ['s.s.', '', null, 's.l.', 'agg.'].indexOf(b.qualifier);\r\n\r\n                        return (aQIndex === bQIndex) ? 0 : (\r\n                            (aQIndex < bQIndex) ? 1 : -1\r\n                        );\r\n                    }\r\n                } else if (a.vernacularMatched && b.vernacularMatched) {\r\n                    // matching both names using vernacular\r\n                    // so sort by this\r\n\r\n                    if (a.vernacular !== b.vernacular) {\r\n                        return a.vernacular.length < b.vernacular.length ? -1 : 1;\r\n                    }\r\n                }\r\n                return a.uname < b.uname ? -1 : 1;\r\n            });\r\n\r\n            // truncate results\r\n            if (results.length > TaxonSearch.MAXIMUM_RESULTS) {\r\n                results.length = TaxonSearch.MAXIMUM_RESULTS;\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n}\r\n\r\n","import {Taxon} from \"../models/Taxon\";\r\n\r\n\r\n/**\r\n * @external BsbiDb\r\n */\r\n\r\n/**\r\n *\r\n */\r\nexport class TaxaLoadedHook {\r\n    static callbackStack = [];\r\n\r\n    static taxaLoadedEntryPoint() {\r\n        Taxon.rawTaxa = BsbiDb.TaxonNames;\r\n        while (TaxaLoadedHook.callbackStack.length) {\r\n            const callback = TaxaLoadedHook.callbackStack.shift();\r\n            try {\r\n                callback();\r\n            } catch (e) {\r\n                console.log({'Exception after taxon load' : e});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Promise<any>|Promise<void>}\r\n     */\r\n    static onceTaxaLoaded() {\r\n        if (BsbiDb.hasOwnProperty('TaxonNames')) {\r\n            return Promise.resolve();\r\n        } else {\r\n            if (!BsbiDb.taxonNamesLoadedEntryPoint) {\r\n                BsbiDb.taxonNamesLoadedEntryPoint = TaxaLoadedHook.taxaLoadedEntryPoint;\r\n            }\r\n\r\n            return new Promise(\r\n                (resolve) => {\r\n                    TaxaLoadedHook.callbackStack.push(resolve);\r\n                }\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n","/**\r\n *\r\n * @param {string} separator\r\n * @param {string} finalSeparator\r\n * @param {Array.<string>} list\r\n * @return string\r\n */\r\nexport function formattedImplode(separator, finalSeparator, list) {\r\n    if (list.length > 2) {\r\n        const last = list.pop();\r\n        return `${list.join(separator + ' ')} ${finalSeparator} ${last}`;\r\n    } else {\r\n        return list.join(` ${finalSeparator} `);\r\n    }\r\n}"],"names":["AppController","route","view","title","handle","app","beforeRouteHandler","afterRouteHandler","leaveRouteHandler","alreadyRouteHandler","static","nextHandle","handleIndex","initialise","this","registerRoute","router","Error","console","log","on","routeHandler","bind","before","after","leave","already","params","query","NotFoundError","constructor","message","super","EventHarness","eventListeners","bindListener","eventName","obj","method","constructionParam","handlerFunction","context","invocationParam","call","push","addListener","handler","removeListener","destructor","fireEvent","param","f","hasOwnProperty","arguments","STOP_PROPAGATION","exports","e","t","n","r","s","o","u","require","i","code","l","length","_dereq_","module","global","scheduleDrain","draining","Mutation","MutationObserver","WebKitMutationObserver","called","observer","nextTick","element","document","createTextNode","observe","characterData","data","setImmediate","MessageChannel","createElement","scriptEl","onreadystatechange","parentNode","removeChild","documentElement","appendChild","setTimeout","channel","port1","onmessage","port2","postMessage","queue","oldQueue","len","immediate","task","self","window","INTERNAL","handlers","REJECTED","FULFILLED","PENDING","Promise","resolver","TypeError","state","outcome","safelyResolveThenable","QueueItem","promise","onFulfilled","onRejected","callFulfilled","otherCallFulfilled","callRejected","otherCallRejected","unwrap","func","value","returnValue","reject","resolve","getThen","then","apply","thenable","onError","onSuccess","tryToUnwrap","result","tryCatch","status","out","reason","all","iterable","Object","prototype","toString","values","Array","resolved","allResolver","resolveFromAll","outValue","error","race","response","_typeof","Symbol","iterator","_classCallCheck","instance","Constructor","getIDB","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","idb","isIndexedDBValid","open","isSafari","openDatabase","test","navigator","userAgent","platform","hasFetch","fetch","indexOf","IDBKeyRange","createBlob","parts","properties","Blob","name","builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","append","getBlob","type","Promise$1","executeCallback","callback","executeTwoCallbacks","errorCallback","normalizeKey","key","warn","String","getCallback","DETECT_BLOB_SUPPORT_STORE","supportsBlobs","dbContexts","READ_ONLY","READ_WRITE","_binStringToArrayBuffer","bin","buf","ArrayBuffer","arr","Uint8Array","charCodeAt","_checkBlobSupportWithoutCaching","txn","transaction","blob","objectStore","put","onabort","preventDefault","stopPropagation","oncomplete","matchedChrome","match","matchedEdge","parseInt","_checkBlobSupport","_deferReadiness","dbInfo","dbContext","deferredOperation","deferredOperations","dbReady","_advanceReadiness","pop","_rejectReadiness","err","_getConnection","upgradeNeeded","createDbContext","db","close","dbArgs","version","openreq","onupgradeneeded","createObjectStore","storeName","oldVersion","ex","newVersion","onerror","onsuccess","onversionchange","target","_getOriginalConnection","_getUpgradedConnection","_isUpgradeNeeded","defaultVersion","isNewStore","objectStoreNames","contains","isDowngrade","isUpgrade","incVersion","_encodeBlob","reader","FileReader","onloadend","base64","btoa","__local_forage_encoded_blob","readAsBinaryString","_decodeBlob","encodedBlob","atob","_isEncodedBlob","_fullyReady","_initReady","_dbInfo","_tryReconnect","forages","forage","createTransaction","mode","retries","undefined","tx","_initStorage","options","ready","initPromises","ignoreErrors","j","slice","_defaultConfig","k","getItem","req","get","iterate","openCursor","iterationNumber","cursor","setItem","blobSupport","store","removeItem","clear","count","advanced","openKeyCursor","advance","keys","dropInstance","currentConfig","config","dbPromise","dropObjectPromise","deleteObjectStore","_forage2","dropDBPromise","deleteDatabase","onblocked","asyncStorage","_driver","_support","isWebSQLValid","BASE_CHARS","BLOB_TYPE_PREFIX","BLOB_TYPE_PREFIX_REGEX","SERIALIZED_MARKER","SERIALIZED_MARKER_LENGTH","TYPE_ARRAYBUFFER","TYPE_BLOB","TYPE_INT8ARRAY","TYPE_UINT8ARRAY","TYPE_UINT8CLAMPEDARRAY","TYPE_INT16ARRAY","TYPE_INT32ARRAY","TYPE_UINT16ARRAY","TYPE_UINT32ARRAY","TYPE_FLOAT32ARRAY","TYPE_FLOAT64ARRAY","TYPE_SERIALIZED_MARKER_LENGTH","toString$1","stringToBuffer","serializedString","encoded1","encoded2","encoded3","encoded4","bufferLength","p","buffer","bytes","bufferToString","base64String","substring","serialize","valueType","marker","fileReader","onload","str","readAsArrayBuffer","JSON","stringify","deserialize","parse","blobType","matcher","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","localforageSerializer","createDbTable","executeSql","_initStorage$1","dbInfoPromise","description","size","serializer","tryExecuteSql","sqlStatement","args","SYNTAX_ERR","results","rows","getItem$1","item","iterate$1","_setItem","retriesLeft","originalValue","sqlError","QUOTA_ERR","setItem$1","removeItem$1","clear$1","length$1","c","key$1","keys$1","getAllStoreNames","storeNames","dropInstance$1","operationInfo","dropTable","operations","webSQLStorage","isLocalStorageValid","localStorage","_getKeyPrefix","defaultConfig","keyPrefix","checkIfLocalStorageThrows","localStorageTestKey","_isLocalStorageUsable","_initStorage$2","clear$2","getItem$2","iterate$2","keyPrefixLength","key$2","keys$2","itemKey","length$2","removeItem$2","setItem$2","dropInstance$2","localStorageWrapper","sameValue","x","y","isNaN","includes","array","searchElement","isArray","arg","DefinedDrivers","DriverSupport","DefaultDrivers","INDEXEDDB","WEBSQL","LOCALSTORAGE","DefaultDriverOrder","OptionalDriverMethods","LibraryMethods","concat","DefaultConfig","driver","callWhenReady","localForageInstance","libraryMethod","_args","extend","_key","LocalForage","driverTypeKey","driverName","defineDriver","_config","_driverSet","_initDriver","_ready","_wrapLibraryMethodsWithReady","setDriver","replace","driverObject","complianceError","driverMethods","driverMethodName","configureMissingMethods","methodNotImplementedFactory","methodName","_i","_len","optionalDriverMethod","setDriverSupport","support","info","getDriver","getDriverPromise","getSerializer","serializerPromise","drivers","supportedDrivers","_getSupportedDrivers","setDriverToConfig","extendSelfWithDriver","_extend","initDriver","currentDriverIndex","driverPromiseLoop","oldDriverSetDone","supports","libraryMethodsAndProperties","createInstance","localforage_js","uuid","a","Math","random","UUID_REGEX","Model","_id","_savedRemotely","savedRemotely","savedFlag","EVENT_SAVED_REMOTELY","id","_savedLocally","deleted","createdStamp","modifiedStamp","projectId","isPristine","floor","Date","now","unsaved","newId","queuePost","formData","post","_tasks","finally","_next","shift","SAVE_ENDPOINT","body","ok","clone","json","responseData","saveState","created","modified","modelObject","localforage","TYPE","descriptor","_parseDescriptor","_parseAttributes","attributes","_parseSavedState","touch","evaluateCompletionStatus","formSectionProperties","validity","requiredFieldsPresent","property","validator","field","isValid","TaxonError","escapeHTML","text","textArea","innerHTML","pre","Taxon","nameString","canonical","hybridCanonical","acceptedEntityId","qualifier","authority","vernacular","vernacularRoot","used","sortOrder","parentIds","rawTaxa","BsbiDb","TaxonNames","raw","taxon","formattedHTML","vernacularMatched","acceptedTaxon","fromId","showVernacular","Occurrence","isNew","taxonId","formChangedHandler","form","updateModelFromContent","conditionallyValidateForm","EVENT_MODIFIED","occurrenceId","delete","save","surveyId","FormData","InternalAppError","MainController","currentOccurrenceId","needsFullRefresh","needRightPanelRefresh","viewSubcontext","surveySection","leftPanelBaseRoute","occurrences","currentOccurrence","has","survey","currentSurvey","controller","EVENT_SELECT_OCCURRENCE","occurrenceSelectionHandler","EVENT_SELECT_SURVEY_SECTION","surveyPartSelectionHandler","EVENT_NEW_RECORD","newRecordHandler","EVENT_DELETE_OCCURRENCE","deleteOccurrenceHandler","EVENT_BACK","backHandler","EVENT_NEXT_TO_RECORDS","nextTransitionToRecordsHandler","haveExtantOccurrences","navigate","parameters","deleting","occurrence","sectionKey","addNewOccurrence","mainRouteHandler","subcontext","rhs","queryParameters","saveRoute","viewContexts","currentControllerHandle","panelKey","display","rethrownError","record","section","routeHistory","url","history","back","StaticContentController","Survey","hasAppModifiedListener","geoReference","georef","gridRef","rawString","source","latLng","precision","date","place","setAttribute","attributeName","generateSurveyName","trim","userDate","dateString","createdDate","toLocaleString","year","month","day","OccurrenceImage","file","Map","getUrl","image","placeholderObject","imageCache","set","width","height","attributesString","className","App","containerEl","controllers","surveys","_currentSurvey","CURRENT_SURVEY_KEY_NAME","getLastSurveyId","catch","layout","reset","setLocalForageName","clearCurrentSurvey","containerId","el","getElementById","container","registerController","notFound","notFoundView","pause","resume","syncAll","lastRoute","lastRouteResolved","markAllNotPristine","occurrenceTuple","setLayout","setApp","addSurvey","EVENT_SURVEYS_CHANGED","addOccurrence","refreshFromServer","surveyIds","LOAD_SURVEYS_ENDPOINT","jsonResponse","promises","object","_conditionallyReplaceObject","externalVersion","localVersion","seekKeys","storedObjectKeys","split","_syncLocalUnsaved","EVENT_ALL_SYNCED_TO_SERVER","failedResult","EVENT_SYNC_ALL_FAILED","surveyKey","retrieveFromLocal","occurrenceKey","imageKey","restoreOccurrences","targetSurveyId","_restoreOccurrenceImp","lastSurveyId","localSurvey","surveyFetchingPromises","_restoreSurveyFromLocal","setNewSurvey","EVENT_NEW_SURVEY","EVENT_OCCURRENCE_ADDED","setAsCurrent","occurrenceFetchingPromises","imageFetchingPromises","occurrenceImageKey","occurrenceImage","clearLocalForage","SurveyPickerController","newSurveyHandler","beforeNewHandler","beforeResetHandler","beforeSaveAllHandler","addSurveyHandler","EVENT_ADD_SURVEY_USER_REQUEST","addNewSurveyHandler","EVENT_RESET_SURVEYS","resetSurveysHandler","done","newSurveyDialog","showResetDialog","showSaveAllSuccess","showSaveAllFailure","toLowerCase","ResponseFactory","toSaveLocally","pair","entries","responses","returnedToClient","packageClientResponse","headers","Headers","Response","LocalResponse","prebuiltResponse","failureErrorMessage","failureErrorHelp","setPrebuiltResponse","storeLocally","localKey","errorHelp","populateClientResponse","ImageResponse","imageId","populateLocalSave","SurveyResponse","OccurrenceResponse","BSBIServiceWorker","URL_CACHE_SET","configuration","register","CACHE_VERSION","POST_PASS_THROUGH_WHITELIST","postPassThroughWhitelist","POST_IMAGE_URL_MATCH","postImageUrlMatch","GET_IMAGE_URL_MATCH","getImageUrlMatch","SERVICE_WORKER_INTERCEPT_URL_MATCHES","interceptUrlMatches","SERVICE_WORKER_IGNORE_URL_MATCHES","ignoreUrlMatches","SERVICE_WORKER_PASS_THROUGH_NO_CACHE","passThroughNoCache","INDEX_URL","indexUrl","urlCacheSet","forageName","addEventListener","evt","skipWaiting","waitUntil","precache","event","clients","matchAll","includeUncontrolled","clientList","urls","map","client","join","caches","cacheNames","cacheName","startsWith","claim","request","respondWith","handle_image_post","handle_post","spaRequest","Request","fromCache","update","handleImageFetch","clonedRequest","jsonResponseData","fromPostResponse","fromPostedData","cache","addAll","matching","matches","imageFromLocalDatabase","caught","statusText","credentials","TaxonSearch","minimumRankSort","requireExtantDDbRecords","skipJunk","taxonResult","queryString","uname","acceptedNameString","acceptedQualifier","acceptedAuthority","taxonString","taxonRankNameSearchRegex","taxonRankNameReplacement","taxonQualifierSearchRegex","taxonQualifierReplacement","literal","cleanRegex","names","splitParts","escapeRegExp","hybridPermutations","permutate","items","perms","newItems","newPerms","unshift","splice","lookup","preferHybrids","matchedIds","normaliseTaxonName","decodeURIComponent","abbreviatedMatches","abbreviatedGenusRegex","exp","nearMatchExp","RegExp","generate_hybrid_combinations_regex","testTaxon","canonicalColumn","nameStringColumn","hybridCanonicalColumn","exact","near","compile_results","canonicalQuery","nearMatchRegex","escapedTaxonString","strictEscapedTaxonString","canonicalQueryRegExp","caseInsensitiveEscapedTaxonRegex","vernacularColumn","vernacularRootColumn","broadRegExp","usedColumn","minRankColumn","qname","qualifierColumn","row","entityId","authorityColumn","formatted","formatter","acceptedEntityIdColumn","sort","b","aIsHybrid","bIsHybrid","aQIndex","bQIndex","MAXIMUM_RESULTS","TaxaLoadedHook","callbackStack","taxonNamesLoadedEntryPoint","taxaLoadedEntryPoint","formattedImplode","separator","finalSeparator","list","last"],"mappings":"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"}